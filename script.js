let currentSubject = "";
let chatHistory = {}; // L∆∞u l·ªãch s·ª≠ t·ª´ng m√¥n
let isTyping = false; // ƒê·ªÉ ki·ªÉm so√°t typing animation

// Initialize app on load
document.addEventListener('DOMContentLoaded', function() {
    loadTheme();
    
    // Load chat history for authenticated users when choosing a subject
    if (isAuthenticated() && currentSubject) {
        loadAndDisplayChatHistory(currentSubject);
    }
});

// Dark Mode Toggle Function
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    
    body.classList.toggle('dark');
    
    // ƒê·ªïi icon
    if (body.classList.contains('dark')) {
        themeIcon.className = 'fas fa-sun';
        localStorage.setItem('theme', 'dark');
    } else {
        themeIcon.className = 'fas fa-moon';
        localStorage.setItem('theme', 'light');
    }
}

// Load saved theme on page load
function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    
    if (savedTheme === 'dark') {
        body.classList.add('dark');
        themeIcon.className = 'fas fa-sun';
    } else {
        themeIcon.className = 'fas fa-moon';
    }
}

// Typing Animation Function
function showTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    indicator.style.display = 'flex';
    isTyping = true;
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    indicator.style.display = 'none';
    isTyping = false;
}

function typeMessage(element, text, speed = 50) {
    element.innerHTML = '';
    let i = 0;
    
    function typeChar() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(typeChar, speed);
        }
    }
    
    typeChar();
}

// H√†m m·ªõi ƒë·ªÉ cu·ªôn l√™n ƒë·∫ßu trang v√† c√≥ th·ªÉ m·ªü chatbox (n·∫øu c·∫ßn)
function scrollToTopAndShowSubjects() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth' // Cu·ªôn m∆∞·ª£t m√†
    });
}

async function chooseSubject(subject) {
    const chatBox = document.getElementById("chatBox");
    const chat = document.getElementById("chatContent");
    const chatHeader = document.querySelector(".chat-header");

    // Check if user needs to login for AI features
    if (!isAuthenticated()) {
        showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£i nghi·ªám ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng AI', 'info');
    }

    // N·∫øu c√πng m·ªôt m√¥n h·ªçc v√† chatbox ƒëang ·∫©n ‚Üí hi·ªán l·∫°i m√† kh√¥ng reset
    if (currentSubject === subject) {
        if (chatBox.style.display === "none") {
            chatBox.style.display = "flex";
            setTimeout(() => {
                chatBox.classList.add("active");
            }, 10);
        }
        return;
    }

    currentSubject = subject;
    chatHeader.innerHTML = `üí¨ Tr·ª£ l√Ω m√¥n ${subject}<span class="close-btn" onclick="closeChatBox()">‚úñ</span>`;

    if (chatBox.style.display !== "flex") {
        chatBox.style.display = "flex";
        setTimeout(() => {
            chatBox.classList.add("active");
        }, 10);
    } else {
        // ƒê·∫£m b·∫£o animation ch·∫°y l·∫°i khi chuy·ªÉn m√¥n m√† chatbox ƒëang m·ªü
        chatBox.classList.remove("active");
        setTimeout(() => {
            chatBox.classList.add("active");
        }, 10);
    }

    chat.innerHTML = ""; // X√≥a n·ªôi dung chat c≈©
    
    // Show typing indicator v√† sau ƒë√≥ hi·ªÉn th·ªã message v·ªõi typing effect
    showTypingIndicator();
    setTimeout(() => {
        hideTypingIndicator();
        const welcomeMsg = isAuthenticated() ? 
            `üìö B·∫°n ƒë√£ ch·ªçn m√¥n: ${subject}. AI tr·ª£ l√Ω ƒë√£ s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!` :
            `üìö B·∫°n ƒë√£ ch·ªçn m√¥n: ${subject}. ƒêƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng AI tr·ª£ l√Ω th√¥ng minh!`;
        appendBotMessageWithTyping(welcomeMsg);
        
        // Hi·ªÉn th·ªã suggestions sau khi typing xong
        setTimeout(() => {
            showSuggestions(subject);
        }, 1000);
    }, 1500);

    // Load l·ªãch s·ª≠ cho authenticated users
    if (isAuthenticated()) {
        loadAndDisplayChatHistory(subject);
    }
}

// Load and display chat history for authenticated users
async function loadAndDisplayChatHistory(subject) {
    try {
        const history = await loadChatHistory(subject);
        if (history && history.length > 0) {
            const chat = document.getElementById("chatContent");
            
            // Wait a bit for the welcome message to display first
            setTimeout(() => {
                history.forEach(({ message, response }) => {
                    appendUserMessage(message);
                    appendBotMessage(response);
                });
                chat.scrollTop = chat.scrollHeight;
            }, 2500);
        }
    } catch (error) {
        console.error('Error loading chat history:', error);
    }
}

function showSuggestions(subject) {
    const chat = document.getElementById("chatContent");
    
    // L·∫•y 2-3 g·ª£i √Ω ng·∫´u nhi√™n
    const allSuggestions = suggestionList[subject] || [];
    const shuffledSuggestions = allSuggestions.sort(() => 0.5 - Math.random());
    const suggestionsToShow = shuffledSuggestions.slice(0, 3);

    const chatOptionsDiv = document.createElement("div");
    chatOptionsDiv.className = "chat-options";
    chatOptionsDiv.style.opacity = "0";
    chatOptionsDiv.style.transform = "translateY(20px)";

    suggestionsToShow.forEach((option, index) => {
        const btn = document.createElement("button");
        btn.textContent = option;
        btn.style.opacity = "0";
        btn.style.transform = "translateY(20px)";
        btn.onclick = () => {
            document.getElementById("chatInput").value = option;
            sendMessage();
        };
        chatOptionsDiv.appendChild(btn);
        
        // Animate each button
        setTimeout(() => {
            btn.style.transition = "all 0.3s ease";
            btn.style.opacity = "1";
            btn.style.transform = "translateY(0)";
        }, index * 200);
    });

    chat.appendChild(chatOptionsDiv);
    
    // Animate container
    setTimeout(() => {
        chatOptionsDiv.style.transition = "all 0.3s ease";
        chatOptionsDiv.style.opacity = "1";
        chatOptionsDiv.style.transform = "translateY(0)";
    }, 100);
    
    chat.scrollTop = chat.scrollHeight;
}

async function sendMessage() {
    const input = document.getElementById("chatInput");
    const text = input.value.trim();
    if (!text || isTyping) return;

    appendUserMessage(text);
    saveChat("user", text);
    input.value = "";

    // Show typing indicator
    showTypingIndicator();
    
    try {
        // Get AI response
        const reply = await generateBotReply(text);
        hideTypingIndicator();
        
        if (reply) { // Only append if there's a reply (quiz doesn't return one)
            appendBotMessageWithTyping(reply);
            saveChat("bot", reply);
        }
    } catch (error) {
        hideTypingIndicator();
        console.error('Send message error:', error);
        appendBotMessageWithTyping("ü§ñ Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
}

function appendUserMessage(text) {
    const chat = document.getElementById("chatContent");
    const messageDiv = document.createElement("div");
    messageDiv.className = "user-message";
    messageDiv.textContent = text;
    messageDiv.style.opacity = "0";
    messageDiv.style.transform = "translateX(50px)";
    
    chat.appendChild(messageDiv);
    
    // Animate message
    setTimeout(() => {
        messageDiv.style.transition = "all 0.3s ease";
        messageDiv.style.opacity = "1";
        messageDiv.style.transform = "translateX(0)";
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function appendBotMessage(text) {
    const chat = document.getElementById("chatContent");
    const messageDiv = document.createElement("div");
    messageDiv.className = "bot-message";
    messageDiv.textContent = text;
    messageDiv.style.opacity = "0";
    messageDiv.style.transform = "translateX(-50px)";
    
    chat.appendChild(messageDiv);
    
    // Animate message
    setTimeout(() => {
        messageDiv.style.transition = "all 0.3s ease";
        messageDiv.style.opacity = "1";
        messageDiv.style.transform = "translateX(0)";
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function appendBotMessageWithTyping(text) {
    const chat = document.getElementById("chatContent");
    const messageDiv = document.createElement("div");
    messageDiv.className = "bot-message";
    messageDiv.style.opacity = "0";
    messageDiv.style.transform = "translateX(-50px)";
    
    chat.appendChild(messageDiv);
    
    // Animate message appearance
    setTimeout(() => {
        messageDiv.style.transition = "all 0.3s ease";
        messageDiv.style.opacity = "1";
        messageDiv.style.transform = "translateX(0)";
        
        // Start typing animation after message appears
        setTimeout(() => {
            typeMessage(messageDiv, text);
        }, 300);
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function saveChat(role, text) {
    if (!chatHistory[currentSubject]) {
        chatHistory[currentSubject] = [];
    }
    chatHistory[currentSubject].push({ role, text });
}

// Update generateBotReply function to use AI
async function generateBotReply(text) {
    if (!currentSubject) return "ü§ñ Vui l√≤ng ch·ªçn m√¥n h·ªçc tr∆∞·ªõc nh√©.";

    // Check for quiz keywords
    if (text.toLowerCase().includes("quiz") || text.toLowerCase().includes("ki·ªÉm tra") || text.toLowerCase().includes("thi")) {
        startQuiz(currentSubject);
        return ""; // Don't return anything as startQuiz handles the response
    }

    // If user is not authenticated, use basic responses
    if (!isAuthenticated()) {
        showToast('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng AI tr·ª£ l√Ω', 'info');
        const repo = replyDatabase[currentSubject];
        for (let key in repo) {
            if (text.toLowerCase().includes(key.toLowerCase())) {
                return repo[key];
            }
        }
        return `ü§ñ M√¨nh ch∆∞a r√µ c√¢u h·ªèi. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng AI tr·ª£ l√Ω th√¥ng minh h∆°n!`;
    }

    // Use AI for authenticated users
    try {
        const aiResponse = await sendAIMessage(text, currentSubject);
        return aiResponse;
    } catch (error) {
        console.error('AI response error:', error);
        // Fallback to basic responses
        const repo = replyDatabase[currentSubject];
        for (let key in repo) {
            if (text.toLowerCase().includes(key.toLowerCase())) {
                return repo[key];
            }
        }
        return `ü§ñ Xin l·ªói, AI ƒëang g·∫∑p s·ª± c·ªë. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i sau ho·∫∑c h·ªèi m·ªôt c√¢u kh√°c.`;
    }
}

function closeChatBox() {
    const chatBox = document.getElementById("chatBox");
    chatBox.classList.remove("active");
    setTimeout(() => {
        chatBox.style.display = "none";
    }, 400);
}

function resetChat() {
    const chat = document.getElementById("chatContent");
    chat.innerHTML = "";
    if (currentSubject) chatHistory[currentSubject] = [];
    appendBotMessage(`üßπ B·∫°n ƒë√£ l√†m m·ªõi h·ªôi tho·∫°i m√¥n ${currentSubject}.`);
    
    // Th√™m l·∫°i g·ª£i √Ω sau khi reset
    setTimeout(() => {
        showSuggestions(currentSubject);
    }, 500);
}

// Quiz functionality
let currentQuiz = null;
let currentQuestionIndex = 0;
let quizScore = 0;

function startQuiz(subject) {
    const quizData = quizDatabase[subject];
    if (!quizData) {
        appendBotMessage("ü§ñ Xin l·ªói, ch∆∞a c√≥ quiz cho m√¥n n√†y.");
        return;
    }

    currentQuiz = quizData;
    currentQuestionIndex = 0;
    quizScore = 0;

    appendBotMessage(`üéØ B·∫Øt ƒë·∫ßu Quiz ${subject}! B·∫°n s·∫Ω c√≥ ${currentQuiz.length} c√¢u h·ªèi.`);
    
    setTimeout(() => {
        showQuizQuestion();
    }, 1000);
}

function showQuizQuestion() {
    if (currentQuestionIndex >= currentQuiz.length) {
        showQuizScore();
        return;
    }

    const question = currentQuiz[currentQuestionIndex];
    const chat = document.getElementById("chatContent");

    // Add question
    appendBotMessage(`‚ùì C√¢u ${currentQuestionIndex + 1}: ${question.question}`);

    // Add options
    setTimeout(() => {
        const optionsDiv = document.createElement("div");
        optionsDiv.className = "quiz-options";

        question.options.forEach((option, index) => {
            const btn = document.createElement("button");
            btn.className = "quiz-button";
            btn.innerHTML = `<span class="quiz-letter">${String.fromCharCode(65 + index)}</span>${option}`;
            btn.onclick = () => checkQuizAnswer(index, btn);
            optionsDiv.appendChild(btn);
        });

        chat.appendChild(optionsDiv);
        chat.scrollTop = chat.scrollHeight;
    }, 500);
}

function checkQuizAnswer(selectedIndex, buttonElement) {
    const question = currentQuiz[currentQuestionIndex];
    const isCorrect = selectedIndex === question.correct;

    if (isCorrect) {
        quizScore++;
        buttonElement.classList.add("quiz-correct");
        appendBotMessage("‚úÖ Ch√≠nh x√°c! Tuy·ªát v·ªùi!");
    } else {
        buttonElement.classList.add("quiz-incorrect");
        const correctAnswer = String.fromCharCode(65 + question.correct);
        appendBotMessage(`‚ùå Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√† ${correctAnswer}. ${question.explanation || ''}`);
    }

    // Disable all buttons
    const allButtons = document.querySelectorAll('.quiz-button');
    allButtons.forEach(btn => {
        btn.style.pointerEvents = 'none';
    });

    currentQuestionIndex++;
    
    setTimeout(() => {
        if (currentQuestionIndex < currentQuiz.length) {
            showQuizQuestion();
        } else {
            showQuizScore();
        }
    }, 2000);
}

async function showQuizScore() {
    const percentage = Math.round((quizScore / currentQuiz.length) * 100);
    let message = `üéâ Quiz ho√†n th√†nh!\n`;
    message += `üìä K·∫øt qu·∫£: ${quizScore}/${currentQuiz.length} (${percentage}%)\n`;
    
    if (percentage >= 80) {
        message += `üåü Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c r·ªìi!`;
    } else if (percentage >= 60) {
        message += `üëç Kh√° t·ªët! H√£y √¥n t·∫≠p th√™m m·ªôt ch√∫t n·ªØa nh√©.`;
    } else {
        message += `üìö C·∫ßn c·ªë g·∫Øng h∆°n! H√£y h·ªçc k·ªπ l·∫°i v√† th·ª≠ l·∫°i nh√©.`;
    }

    appendBotMessage(message);
    
    // Save quiz progress if authenticated
    if (isAuthenticated()) {
        try {
            await saveQuizProgress(currentSubject, quizScore, currentQuiz.length);
        } catch (error) {
            console.error('Error saving quiz progress:', error);
        }
    }

    // Reset quiz
    currentQuiz = null;
    currentQuestionIndex = 0;
    quizScore = 0;
}

// ƒê√≥ng chat n·∫øu click b√™n ngo√†i (tr·ª´ n√∫t m√¥n h·ªçc v√† n√∫t CTA)
document.addEventListener("click", function (e) {
    const chatBox = document.getElementById("chatBox");
    const isClickInsideChatBox = chatBox.contains(e.target);
    const isClickOnSubjectCard = e.target.closest(".subject-card");
    const isClickOnCTAButton = e.target.closest(".cta-button");

    if (
        chatBox.style.display === "flex" &&
        !isClickInsideChatBox &&
        !isClickOnSubjectCard &&
        !isClickOnCTAButton
    ) {
        closeChatBox();
    }
});

// G·ª≠i tin nh·∫Øn khi nh·∫•n Enter
document.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && document.activeElement.id === "chatInput") {
        sendMessage();
    }
});

// D·ªØ li·ªáu g·ª£i √Ω
const suggestionList = {
    "To√°n h·ªçc": [
        "üß© Quiz To√°n h·ªçc",
        "Gi·∫£i ph∆∞∆°ng tr√¨nh x + 5 = 10",
        "T·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn 100",
        "Di·ªán t√≠ch h√¨nh tr√≤n",
        "C√¥ng th·ª©c chu vi h√¨nh ch·ªØ nh·∫≠t",
        "Ph√©p chia c√≥ d∆∞ l√† g√¨?",
        "S·ªë nguy√™n t·ªë l√† g√¨?",
        "T√≠nh 7 x 8",
        "Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh",
        "H√†m s·ªë l√† g√¨?",
        "ƒê·∫°o h√†m l√† g√¨?",
        "T√≠ch ph√¢n c∆° b·∫£n",
        "Gi·∫£i b·∫•t ph∆∞∆°ng tr√¨nh",
        "T√≠nh g√≥c tam gi√°c ƒë·ªÅu",
        "S·ªë pi l√† bao nhi√™u?",
        "ƒê·ªãnh l√Ω Pitago",
        "X√°c su·∫•t trong tung ƒë·ªìng xu",
        "Th·ªëng k√™ m√¥ t·∫£",
        "Ma tr·∫≠n l√† g√¨?",
        "Gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c 2"
    ],
    "VƒÉn h·ªçc": [
        "üß© Quiz VƒÉn h·ªçc",
        "Ph√¢n t√≠ch Truy·ªán Ki·ªÅu",
        "T√≥m t·∫Øt Ch√≠ Ph√®o",
        "C·∫£m nh·∫≠n b√†i Vi·ªát B·∫Øc",
        "Phong c√°ch ngh·ªá thu·∫≠t Nguy·ªÖn Du",
        "So s√°nh th∆° x∆∞a v√† nay",
        "Ngh·ªã lu·∫≠n x√£ h·ªôi l√† g√¨?",
        "VƒÉn bi·ªÉu c·∫£m l√† g√¨?",
        "Ng·ªØ ph√°p ti·∫øng Vi·ªát c√≥ g√¨ ƒë·∫∑c bi·ªát?",
        "C·∫£m x√∫c trong th∆° H√†n M·∫∑c T·ª≠",
        "√ù nghƒ©a b√†i th∆° T·ªè l√≤ng",
        "T√≥m t·∫Øt truy·ªán L√£o H·∫°c",
        "Gi√° tr·ªã nh√¢n ƒë·∫°o c·ªßa V·ª£ Nh·∫∑t",
        "Phong c√°ch th∆° Xu√¢n Di·ªáu",
        "Ng√¥n ng·ªØ trong k·ªãch n√≥i",
        "So s√°nh Truy·ªán Ki·ªÅu v√† L·ª•c V√¢n Ti√™n",
        "H·ªìi k√Ω vƒÉn h·ªçc l√† g√¨?",
        "Ch·ª©c nƒÉng c·ªßa ·∫©n d·ª•",
        "N√™u c·∫£m nh·∫≠n v·ªÅ ƒëo·∫°n th∆° em th√≠ch",
        "V√¨ sao c·∫ßn h·ªçc vƒÉn?"
    ],
    "L·ªãch s·ª≠": [
        "üß© Quiz L·ªãch s·ª≠",
        "T√≥m t·∫Øt s·ª± ki·ªán 2/9/1945",
        "Nguy√™n nh√¢n chi·∫øn tranh th·∫ø gi·ªõi 1",
        "C√°c tri·ªÅu ƒë·∫°i phong ki·∫øn VN",
        "Phong tr√†o C·∫ßn V∆∞∆°ng",
        "√ù nghƒ©a C√°ch m·∫°ng th√°ng T√°m",
        "Kh√°ng chi·∫øn ch·ªëng Ph√°p",
        "Th·ªùi k·ª≥ B·∫Øc thu·ªôc",
        "Nh·ªØng th√†nh t·ª±u th·ªùi L√Ω",
        "Tr·∫≠n B·∫°ch ƒê·∫±ng",
        "L·ªãch s·ª≠ ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam",
        "Vai tr√≤ H·ªì Ch√≠ Minh",
        "S·ª± ki·ªán 30/4/1975",
        "Chi·∫øn tranh l·∫°nh l√† g√¨?",
        "S·ª± h√¨nh th√†nh ASEAN",
        "C·∫£i c√°ch ru·ªông ƒë·∫•t",
        "Hi·ªáp ƒë·ªãnh Gen√®ve 1954",
        "Ch·ªß nghƒ©a t∆∞ b·∫£n l√† g√¨?",
        "X√£ h·ªôi nguy√™n th·ªßy",
        "C√°ch m·∫°ng c√¥ng nghi·ªáp l·∫ßn 1"
    ],
    "Khoa h·ªçc": [
        "üß© Quiz Khoa h·ªçc",
        "T·∫°i sao tr·ªùi m∆∞a?",
        "N∆∞·ªõc s√¥i ·ªü bao nhi√™u ƒë·ªô?",
        "Chu tr√¨nh carbon",
        "L·ª±c h·∫•p d·∫´n l√† g√¨?",
        "T·∫ø b√†o ƒë·ªông v·∫≠t v√† th·ª±c v·∫≠t kh√°c nhau?",
        "Quang h·ª£p l√† g√¨?",
        "ƒê·ªông ƒë·∫•t x·∫£y ra do ƒë√¢u?",
        "C·∫•u tr√∫c nguy√™n t·ª≠",
        "Hi·ªán t∆∞·ª£ng kh√∫c x·∫° √°nh s√°ng",
        "C·∫£m bi·∫øn nhi·ªát ƒë·ªô",
        "Pin ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
        "Ph·∫£n ·ª©ng ho√° h·ªçc l√† g√¨?",
        "H·ªá M·∫∑t Tr·ªùi c√≥ bao nhi√™u h√†nh tinh?",
        "Tr√°i ƒê·∫•t quay quanh M·∫∑t Tr·ªùi bao l√¢u?",
        "DNA l√† g√¨?",
        "Nhi·ªát ƒë·ªô √¢m l√† g√¨?",
        "√Åp su·∫•t kh√≠ quy·ªÉn",
        "Th·ª±c ph·∫©m bi·∫øn ƒë·ªïi gen",
        "C√¥ng ngh·ªá AI ho·∫°t ƒë·ªông th·∫ø n√†o?"
    ],
    "Ngo·∫°i ng·ªØ": [
        "üß© Quiz Ngo·∫°i ng·ªØ",
        "D·ªãch c√¢u: I love learning",
        "C√°ch d√πng th√¨ hi·ªán t·∫°i ƒë∆°n",
        "T·ª´ v·ª±ng ch·ªß ƒë·ªÅ tr∆∞·ªùng h·ªçc",
        "Ph√¢n bi·ªát much v√† many",
        "T√≠nh t·ª´ trong ti·∫øng Anh",
        "C√¢u b·ªã ƒë·ªông",
        "M·ªánh ƒë·ªÅ quan h·ªá",
        "C√¢u ƒëi·ªÅu ki·ªán lo·∫°i 1",
        "So s√°nh h∆°n v√† nh·∫•t",
        "Tr·∫≠t t·ª± t√≠nh t·ª´",
        "T·ª´ n·ªëi (linking words)",
        "Ph√°t √¢m √¢m /th/",
        "Gi·ªõi t·ª´ in, on, at",
        "C√°ch d√πng be going to",
        "T·ª´ v·ª±ng v·ªÅ th·ªùi ti·∫øt",
        "H·ªèi ƒë∆∞·ªùng b·∫±ng ti·∫øng Anh",
        "Vi·∫øt email ti·∫øng Anh",
        "C√°c th√¨ c∆° b·∫£n",
        "T·ª´ v·ª±ng v·ªÅ gia ƒë√¨nh"
    ]
};

// Basic reply database for fallback
const replyDatabase = {
    "To√°n h·ªçc": {
        "ph∆∞∆°ng tr√¨nh": "üßÆ ƒê·ªÉ gi·∫£i ph∆∞∆°ng tr√¨nh, b·∫°n c·∫ßn c√¥ l·∫≠p bi·∫øn s·ªë. V√≠ d·ª•: x + 5 = 10 ‚Üí x = 10 - 5 = 5",
        "di·ªán t√≠ch": "üìê Di·ªán t√≠ch h√¨nh tr√≤n = œÄ √ó r¬≤. Di·ªán t√≠ch h√¨nh ch·ªØ nh·∫≠t = d√†i √ó r·ªông",
        "chu vi": "üìè Chu vi h√¨nh tr√≤n = 2 √ó œÄ √ó r. Chu vi h√¨nh ch·ªØ nh·∫≠t = 2 √ó (d√†i + r·ªông)",
        "s·ªë nguy√™n t·ªë": "üî¢ S·ªë nguy√™n t·ªë l√† s·ªë t·ª± nhi√™n l·ªõn h∆°n 1, ch·ªâ chia h·∫øt cho 1 v√† ch√≠nh n√≥",
        "pi": "ü•ß S·ªë œÄ ‚âà 3.14159... l√† t·ªâ s·ªë gi·ªØa chu vi v√† ƒë∆∞·ªùng k√≠nh c·ªßa h√¨nh tr√≤n"
    },
    "VƒÉn h·ªçc": {
        "truy·ªán ki·ªÅu": "üìö Truy·ªán Ki·ªÅu c·ªßa Nguy·ªÖn Du l√† t√°c ph·∫©m vƒÉn h·ªçc kinh ƒëi·ªÉn, k·ªÉ v·ªÅ s·ªë ph·∫≠n ƒëau th∆∞∆°ng c·ªßa Th√∫y Ki·ªÅu",
        "ch√≠ ph√®o": "üìñ Ch√≠ Ph√®o c·ªßa Nam Cao mi√™u t·∫£ nh√¢n v·∫≠t n√¥ng d√¢n ngh√®o b·ªã x√£ h·ªôi ƒë√†y ƒë·ªça",
        "vi·ªát b·∫Øc": "üéã Vi·ªát B·∫Øc c·ªßa T·ªë H·ªØu ca ng·ª£i v√πng ƒë·∫•t kh√°ng chi·∫øn thi√™ng li√™ng",
        "nguy·ªÖn du": "‚úçÔ∏è Nguy·ªÖn Du (1765-1820) l√† ƒë·∫°i thi h√†o, t√°c gi·∫£ Truy·ªán Ki·ªÅu b·∫•t h·ªß"
    },
    "L·ªãch s·ª≠": {
        "2/9/1945": "üáªüá≥ Ng√†y 2/9/1945, Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p, khai sinh n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a",
        "c√°ch m·∫°ng th√°ng t√°m": "‚ö° C√°ch m·∫°ng th√°ng T√°m 1945 gi√†nh ch√≠nh quy·ªÅn t·ª´ tay th·ª±c d√¢n Ph√°p v√† ph√°t x√≠t Nh·∫≠t",
        "h·ªì ch√≠ minh": "üë®‚Äçüíº H·ªì Ch√≠ Minh (1890-1969) l√† l√£nh t·ª• vƒ© ƒë·∫°i c·ªßa d√¢n t·ªôc Vi·ªát Nam",
        "30/4/1975": "üèÜ Ng√†y 30/4/1975, S√†i G√≤n gi·∫£i ph√≥ng ho√†n to√†n, th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc"
    },
    "Khoa h·ªçc": {
        "m∆∞a": "üåßÔ∏è M∆∞a h√¨nh th√†nh khi h∆°i n∆∞·ªõc trong kh√¥ng kh√≠ ng∆∞ng t·ª• th√†nh gi·ªçt n∆∞·ªõc v√† r∆°i xu·ªëng",
        "s√¥i": "üî• N∆∞·ªõc s√¥i ·ªü 100¬∞C (·ªü m·ª±c n∆∞·ªõc bi·ªÉn), khi ƒë√≥ √°p su·∫•t h∆°i b·∫±ng √°p su·∫•t kh√≠ quy·ªÉn",
        "h·∫•p d·∫´n": "üåç L·ª±c h·∫•p d·∫´n l√† l·ª±c h√∫t gi·ªØa c√°c v·∫≠t c√≥ kh·ªëi l∆∞·ª£ng, ƒë∆∞·ª£c Newton ph√°t hi·ªán",
        "quang h·ª£p": "üå± Quang h·ª£p l√† qu√° tr√¨nh th·ª±c v·∫≠t d√πng √°nh s√°ng ƒë·ªÉ chuy·ªÉn CO2 v√† H2O th√†nh glucose"
    },
    "Ngo·∫°i ng·ªØ": {
        "i love learning": "‚ù§Ô∏è T√¥i y√™u vi·ªác h·ªçc t·∫≠p",
        "hi·ªán t·∫°i ƒë∆°n": "‚è∞ Th√¨ hi·ªán t·∫°i ƒë∆°n di·ªÖn t·∫£ th√≥i quen, s·ª± th·∫≠t hi·ªÉn nhi√™n. C√¥ng th·ª©c: S + V(s/es)",
        "much many": "üî¢ Much + danh t·ª´ kh√¥ng ƒë·∫øm ƒë∆∞·ª£c, Many + danh t·ª´ ƒë·∫øm ƒë∆∞·ª£c s·ªë nhi·ªÅu",
        "b·ªã ƒë·ªông": "üîÑ C√¢u b·ªã ƒë·ªông: S + be + V3/Ved + (by O). V√≠ d·ª•: The book is read by me"
    }
};

// Quiz database
const quizDatabase = {
    "To√°n h·ªçc": [
        {
            question: "K·∫øt qu·∫£ c·ªßa 15 + 25 = ?",
            options: ["35", "40", "45", "50"],
            correct: 1,
            explanation: "15 + 25 = 40"
        },
        {
            question: "Di·ªán t√≠ch h√¨nh vu√¥ng c√≥ c·∫°nh 5cm l√†:",
            options: ["20 cm¬≤", "25 cm¬≤", "30 cm¬≤", "10 cm¬≤"],
            correct: 1,
            explanation: "Di·ªán t√≠ch = c·∫°nh √ó c·∫°nh = 5 √ó 5 = 25 cm¬≤"
        },
        {
            question: "S·ªë n√†o l√† s·ªë nguy√™n t·ªë?",
            options: ["4", "6", "7", "8"],
            correct: 2,
            explanation: "7 ch·ªâ chia h·∫øt cho 1 v√† 7"
        }
    ],
    "VƒÉn h·ªçc": [
        {
            question: "T√°c gi·∫£ c·ªßa 'Truy·ªán Ki·ªÅu' l√† ai?",
            options: ["Nam Cao", "Nguy·ªÖn Du", "T·ªë H·ªØu", "Xu√¢n Di·ªáu"],
            correct: 1,
            explanation: "Nguy·ªÖn Du l√† t√°c gi·∫£ c·ªßa Truy·ªán Ki·ªÅu"
        },
        {
            question: "Nh√¢n v·∫≠t ch√≠nh trong 'Ch√≠ Ph√®o' l√†:",
            options: ["Ch√≠ Ph√®o", "Th·ªã N·ªü", "Ch√≠ D≈©ng", "C·∫£ A v√† B"],
            correct: 3,
            explanation: "Ch√≠ Ph√®o v√† Th·ªã N·ªü ƒë·ªÅu l√† nh√¢n v·∫≠t ch√≠nh"
        }
    ],
    "L·ªãch s·ª≠": [
        {
            question: "Vi·ªát Nam tuy√™n b·ªë ƒë·ªôc l·∫≠p v√†o ng√†y n√†o?",
            options: ["2/9/1945", "30/4/1975", "19/8/1945", "1/5/1975"],
            correct: 0,
            explanation: "Ng√†y 2/9/1945 Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p"
        }
    ],
    "Khoa h·ªçc": [
        {
            question: "N∆∞·ªõc s√¥i ·ªü nhi·ªát ƒë·ªô bao nhi√™u ƒë·ªô C?",
            options: ["90¬∞C", "95¬∞C", "100¬∞C", "105¬∞C"],
            correct: 2,
            explanation: "N∆∞·ªõc s√¥i ·ªü 100¬∞C ·ªü ƒëi·ªÅu ki·ªán b√¨nh th∆∞·ªùng"
        }
    ],
    "Ngo·∫°i ng·ªØ": [
        {
            question: "'I love you' c√≥ nghƒ©a l√† g√¨?",
            options: ["T√¥i th√≠ch b·∫°n", "T√¥i y√™u b·∫°n", "T√¥i nh·ªõ b·∫°n", "T√¥i c·∫ßn b·∫°n"],
            correct: 1,
            explanation: "'I love you' c√≥ nghƒ©a l√† 'T√¥i y√™u b·∫°n'"
        }
    ]
};

// Th√™m h·ªó tr·ª£ ƒëa thi·∫øt b·ªã v√† file upload
class DeviceOptimizer {
    constructor() {
        this.isMobile = window.innerWidth <= 768;
        this.isTouch = 'ontouchstart' in window;
        this.init();
    }

    init() {
        this.detectDevice();
        this.addTouchSupport();
        this.restoreConversationState();
        this.addFileUploadSupport();
        this.addKeyboardShortcuts();
        
        // Auto-save conversation state
        setInterval(() => this.saveConversationState(), 30000); // Save every 30s
    }

    detectDevice() {
        // Ph√°t hi·ªán thi·∫øt b·ªã v√† ƒëi·ªÅu ch·ªânh UI
        if (this.isMobile) {
            document.body.classList.add('mobile-device');
            // T·ªëi ∆∞u cho mobile
            this.optimizeForMobile();
        }
        
        if (this.isTouch) {
            document.body.classList.add('touch-device');
        }

        // Ph√°t hi·ªán orientation change
        window.addEventListener('orientationchange', () => {
            setTimeout(() => this.handleOrientationChange(), 100);
        });
    }

    optimizeForMobile() {
        // Gi·∫£m animation cho mobile ƒë·ªÉ ti·∫øt ki·ªám pin
        if (this.isMobile) {
            document.documentElement.style.setProperty('--animation-duration', '0.2s');
        }

        // T·ªëi ∆∞u chatbox cho mobile
        const chatBox = document.getElementById('chatBox');
        if (chatBox && this.isMobile) {
            chatBox.style.width = '95vw';
            chatBox.style.maxHeight = '80vh';
        }
    }

    addTouchSupport() {
        // Th√™m haptic feedback cho mobile (n·∫øu h·ªó tr·ª£)
        if ('vibrate' in navigator) {
            document.addEventListener('click', (e) => {
                if (e.target.matches('.subject-card, .chat-input button, .cta-button')) {
                    navigator.vibrate(50); // Rung nh·∫π 50ms
                }
            });
        }

        // Swipe gesture cho chat history
        if (this.isTouch) {
            this.addSwipeGestures();
        }
    }

    addSwipeGestures() {
        const chatContent = document.getElementById('chatContent');
        if (!chatContent) return;

        let startX, startY, distX, distY;
        const threshold = 100; // Minimum distance for swipe

        chatContent.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        });

        chatContent.addEventListener('touchend', (e) => {
            if (!startX || !startY) return;

            distX = e.changedTouches[0].clientX - startX;
            distY = e.changedTouches[0].clientY - startY;

            // Swipe right to show chat options
            if (Math.abs(distX) > Math.abs(distY) && distX > threshold) {
                this.showChatOptions();
            }
        });
    }

    saveConversationState() {
        try {
            const chatHistory = document.getElementById('chatContent')?.innerHTML || '';
            const currentSubjectElement = document.querySelector('.subject-card.active');
            const currentSubject = currentSubjectElement ? 
                currentSubjectElement.querySelector('span').textContent : '';

            const state = {
                chatHistory,
                currentSubject,
                timestamp: Date.now(),
                deviceInfo: {
                    userAgent: navigator.userAgent,
                    screenWidth: window.screen.width,
                    screenHeight: window.screen.height
                }
            };

            localStorage.setItem('chatbotState', JSON.stringify(state));
            
            // Sync to cloud n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
            if (this.isUserLoggedIn()) {
                this.syncToCloud(state);
            }
        } catch (error) {
            console.warn('Failed to save conversation state:', error);
        }
    }

    restoreConversationState() {
        try {
            const savedState = localStorage.getItem('chatbotState');
            if (!savedState) return;

            const state = JSON.parse(savedState);
            
            // Ki·ªÉm tra xem state c√≥ qu√° c≈© kh√¥ng (> 7 ng√†y)
            const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days
            if (Date.now() - state.timestamp > maxAge) {
                localStorage.removeItem('chatbotState');
                return;
            }

            // Restore chat history
            if (state.chatHistory && state.chatHistory.trim()) {
                const chatContent = document.getElementById('chatContent');
                if (chatContent) {
                    chatContent.innerHTML = state.chatHistory;
                    
                    // Show notification about restored session
                    this.showNotification('üíæ Phi√™n chat tr∆∞·ªõc ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c', 'info');
                }
            }

            // Restore subject selection
            if (state.currentSubject) {
                window.currentSubject = state.currentSubject;
            }
        } catch (error) {
            console.warn('Failed to restore conversation state:', error);
            localStorage.removeItem('chatbotState');
        }
    }

    addFileUploadSupport() {
        const chatInput = document.querySelector('.chat-input');
        if (!chatInput) return;

        // T·∫°o file input ·∫©n
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*,audio/*,.pdf,.doc,.docx,.txt';
        fileInput.style.display = 'none';
        fileInput.multiple = false;

        // T·∫°o n√∫t upload
        const uploadBtn = document.createElement('button');
        uploadBtn.type = 'button';
        uploadBtn.innerHTML = '<i class="fas fa-paperclip"></i>';
        uploadBtn.title = 'ƒê√≠nh k√®m file';
        uploadBtn.className = 'upload-btn';
        uploadBtn.style.cssText = `
            background: #f0f4fa;
            border: 1px solid var(--border-light);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-right: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        `;

        uploadBtn.addEventListener('click', () => fileInput.click());
        uploadBtn.addEventListener('mouseenter', () => {
            uploadBtn.style.background = 'var(--primary-color)';
            uploadBtn.style.color = 'white';
        });
        uploadBtn.addEventListener('mouseleave', () => {
            uploadBtn.style.background = '#f0f4fa';
            uploadBtn.style.color = 'inherit';
        });

        // X·ª≠ l√Ω file upload
        fileInput.addEventListener('change', (e) => this.handleFileUpload(e));

        // Th√™m v√†o chat input
        const inputElement = chatInput.querySelector('input');
        chatInput.insertBefore(uploadBtn, inputElement);
        chatInput.appendChild(fileInput);

        // Drag and drop support
        this.addDragDropSupport();
    }

    handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
        const maxSize = 10 * 1024 * 1024;
        if (file.size > maxSize) {
            this.showNotification('‚ùå File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB', 'error');
            return;
        }

        // Hi·ªÉn th·ªã file trong chat
        this.displayFileInChat(file);
        
        // X·ª≠ l√Ω file d·ª±a tr√™n lo·∫°i
        this.processFile(file);
        
        // Reset input
        event.target.value = '';
    }

    displayFileInChat(file) {
        const chatContent = document.getElementById('chatContent');
        if (!chatContent) return;

        const fileMessage = document.createElement('div');
        fileMessage.className = 'user-message file-message';
        
        const fileIcon = this.getFileIcon(file.type);
        const fileSize = this.formatFileSize(file.size);
        
        fileMessage.innerHTML = `
            <div class="file-preview">
                <i class="${fileIcon}" style="font-size: 24px; margin-right: 10px;"></i>
                <div class="file-info">
                    <div class="file-name">${file.name}</div>
                    <div class="file-size" style="font-size: 0.8em; opacity: 0.7;">${fileSize}</div>
                </div>
            </div>
        `;

        chatContent.appendChild(fileMessage);
        chatContent.scrollTop = chatContent.scrollHeight;

        // N·∫øu l√† ·∫£nh, hi·ªÉn th·ªã preview
        if (file.type.startsWith('image/')) {
            this.addImagePreview(fileMessage, file);
        }
    }

    addImagePreview(messageElement, file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.style.cssText = `
                max-width: 200px;
                max-height: 200px;
                border-radius: 8px;
                margin-top: 8px;
                cursor: pointer;
            `;
            img.onclick = () => this.openImageModal(e.target.result);
            messageElement.appendChild(img);
        };
        reader.readAsDataURL(file);
    }

    openImageModal(imageSrc) {
        const modal = document.createElement('div');
        modal.className = 'image-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            cursor: pointer;
        `;

        const img = document.createElement('img');
        img.src = imageSrc;
        img.style.cssText = `
            max-width: 90%;
            max-height: 90%;
            border-radius: 8px;
        `;

        modal.appendChild(img);
        modal.onclick = () => document.body.removeChild(modal);
        document.body.appendChild(modal);
    }

    getFileIcon(fileType) {
        if (fileType.startsWith('image/')) return 'fas fa-image';
        if (fileType.startsWith('audio/')) return 'fas fa-music';
        if (fileType.includes('pdf')) return 'fas fa-file-pdf';
        if (fileType.includes('word')) return 'fas fa-file-word';
        if (fileType.includes('text')) return 'fas fa-file-alt';
        return 'fas fa-file';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    addDragDropSupport() {
        const chatBox = document.getElementById('chatBox');
        if (!chatBox) return;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            chatBox.addEventListener(eventName, (e) => {
                e.preventDefault();
                e.stopPropagation();
            });
        });

        chatBox.addEventListener('dragover', () => {
            chatBox.classList.add('drag-over');
        });

        chatBox.addEventListener('dragleave', () => {
            chatBox.classList.remove('drag-over');
        });

        chatBox.addEventListener('drop', (e) => {
            chatBox.classList.remove('drag-over');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFileUpload({target: {files}});
            }
        });
    }

    addKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Enter ƒë·ªÉ g·ª≠i message
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                const sendBtn = document.querySelector('.chat-input button[onclick="sendMessage()"]');
                if (sendBtn) sendBtn.click();
            }

            // Escape ƒë·ªÉ ƒë√≥ng chat
            if (e.key === 'Escape') {
                const chatBox = document.getElementById('chatBox');
                if (chatBox && chatBox.style.display !== 'none') {
                    closeChatBox();
                }
            }

            // Ctrl/Cmd + U ƒë·ªÉ upload file
            if ((e.ctrlKey || e.metaKey) && e.key === 'u') {
                e.preventDefault();
                const uploadBtn = document.querySelector('.upload-btn');
                if (uploadBtn) uploadBtn.click();
            }
        });
    }

    handleOrientationChange() {
        // ƒêi·ªÅu ch·ªânh UI khi xoay m√†n h√¨nh
        const chatBox = document.getElementById('chatBox');
        if (!chatBox) return;

        if (window.orientation === 90 || window.orientation === -90) {
            // Landscape mode
            chatBox.style.maxHeight = '60vh';
        } else {
            // Portrait mode
            chatBox.style.maxHeight = '80vh';
        }
    }

    processFile(file) {
        // X·ª≠ l√Ω file v√† t·∫°o response t·ª´ bot
        setTimeout(() => {
            let botResponse = '';
            
            if (file.type.startsWith('image/')) {
                botResponse = 'üñºÔ∏è T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh c·ªßa b·∫°n. B·∫°n c√≥ mu·ªën t√¥i ph√¢n t√≠ch n·ªôi dung ho·∫∑c gi·∫£i th√≠ch g√¨ v·ªÅ h√¨nh n√†y kh√¥ng?';
            } else if (file.type.includes('pdf')) {
                botResponse = 'üìÑ T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c file PDF. B·∫°n c√≥ mu·ªën t√¥i t√≥m t·∫Øt n·ªôi dung ho·∫∑c tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ t√†i li·ªáu n√†y kh√¥ng?';
            } else if (file.type.startsWith('audio/')) {
                botResponse = 'üéµ T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c file audio. Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ ph√¢n t√≠ch √¢m thanh, nh∆∞ng b·∫°n c√≥ th·ªÉ m√¥ t·∫£ n·ªôi dung ƒë·ªÉ t√¥i h·ªó tr·ª£ b·∫°n t·ªët h∆°n.';
            } else {
                botResponse = 'üìé T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c file c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ n·ªôi dung ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n kh√¥ng?';
            }

            addBotMessage(botResponse);
        }, 1000);
    }

    isUserLoggedIn() {
        // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
        return localStorage.getItem('isLoggedIn') === 'true';
    }

    syncToCloud(state) {
        // Placeholder cho sync l√™n cloud
        // C√≥ th·ªÉ implement v·ªõi Firebase, Supabase, ho·∫∑c API backend
        console.log('Syncing to cloud...', state);
    }

    showChatOptions() {
        // Hi·ªÉn th·ªã c√°c t√πy ch·ªçn chat khi swipe
        const existingOptions = document.querySelector('.swipe-options');
        if (existingOptions) return;

        const options = document.createElement('div');
        options.className = 'swipe-options';
        options.style.cssText = `
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            background: var(--bg-card-light);
            border-radius: 15px;
            padding: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            z-index: 1500;
            animation: slideInLeft 0.3s ease;
        `;

        options.innerHTML = `
            <button onclick="this.parentElement.remove(); window.deviceOptimizer.clearChat()">
                <i class="fas fa-trash"></i> X√≥a chat
            </button>
            <button onclick="this.parentElement.remove(); window.deviceOptimizer.exportChat()">
                <i class="fas fa-download"></i> Xu·∫•t chat
            </button>
            <button onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i> ƒê√≥ng
            </button>
        `;

        document.body.appendChild(options);

        // Auto-hide after 5s
        setTimeout(() => {
            if (options.parentElement) {
                options.remove();
            }
        }, 5000);
    }

    clearChat() {
        const chatContent = document.getElementById('chatContent');
        if (chatContent) {
            chatContent.innerHTML = '<div class="bot-message">üìå H√£y ch·ªçn m·ªôt m√¥n h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu.</div>';
            localStorage.removeItem('chatbotState');
            this.showNotification('üóëÔ∏è Chat ƒë√£ ƒë∆∞·ª£c x√≥a', 'info');
        }
    }

    exportChat() {
        const chatContent = document.getElementById('chatContent');
        if (!chatContent) return;

        const chatText = chatContent.innerText;
        const blob = new Blob([chatText], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `chat-export-${new Date().toISOString().split('T')[0]}.txt`;
        a.click();
        
        URL.revokeObjectURL(url);
        this.showNotification('üíæ Chat ƒë√£ ƒë∆∞·ª£c xu·∫•t', 'success');
    }

    showNotification(message, type = 'info') {
        // S·ª≠ d·ª•ng h·ªá th·ªëng toast c√≥ s·∫µn
        if (window.showToast) {
            window.showToast(message, type);
        } else {
            // Fallback notification
            console.log(`${type.toUpperCase()}: ${message}`);
        }
    }
}

// Kh·ªüi t·∫°o DeviceOptimizer khi trang load
document.addEventListener('DOMContentLoaded', () => {
    window.deviceOptimizer = new DeviceOptimizer();
});

// Th√™m CSS cho drag and drop
const style = document.createElement('style');
style.textContent = `
    .drag-over {
        border: 2px dashed var(--primary-color) !important;
        background: rgba(91, 123, 255, 0.05) !important;
    }

    .swipe-options button {
        display: block;
        width: 100%;
        padding: 10px 15px;
        margin: 5px 0;
        border: none;
        background: var(--bg-light);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .swipe-options button:hover {
        background: var(--primary-color);
        color: white;
    }

    @keyframes slideInLeft {
        from { transform: translateY(-50%) translateX(100%); opacity: 0; }
        to { transform: translateY(-50%) translateX(0); opacity: 1; }
    }

    .file-message {
        max-width: 300px;
    }

    .file-preview {
        display: flex;
        align-items: center;
        padding: 10px;
        background: rgba(255,255,255,0.5);
        border-radius: 8px;
        margin: 5px 0;
    }

    @media (max-width: 480px) {
        .upload-btn {
            width: 35px !important;
            height: 35px !important;
            margin-right: 6px !important;
        }
    }
`;
document.head.appendChild(style); 