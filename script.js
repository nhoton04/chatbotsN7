<<<<<<< HEAD
let currentSubject = "";
let chatHistory = {}; // L∆∞u l·ªãch s·ª≠ t·ª´ng m√¥n
let isTyping = false; // ƒê·ªÉ ki·ªÉm so√°t typing animation

// Dark Mode Toggle Function
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    
    body.classList.toggle('dark');
    
    // ƒê·ªïi icon
    if (body.classList.contains('dark')) {
        themeIcon.className = 'fas fa-sun';
        localStorage.setItem('theme', 'dark');
    } else {
        themeIcon.className = 'fas fa-moon';
        localStorage.setItem('theme', 'light');
    }
}

// Load saved theme on page load
function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    
    if (savedTheme === 'dark') {
        body.classList.add('dark');
        themeIcon.className = 'fas fa-sun';
    } else {
        themeIcon.className = 'fas fa-moon';
    }
}

// Typing Animation Function
function showTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    indicator.style.display = 'flex';
    isTyping = true;
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    indicator.style.display = 'none';
    isTyping = false;
}

function typeMessage(element, text, speed = 50) {
    element.innerHTML = '';
    let i = 0;
    
    function typeChar() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(typeChar, speed);
        }
    }
    
    typeChar();
}

// H√†m m·ªõi ƒë·ªÉ cu·ªôn l√™n ƒë·∫ßu trang v√† c√≥ th·ªÉ m·ªü chatbox (n·∫øu c·∫ßn)
function scrollToTopAndShowSubjects() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth' // Cu·ªôn m∆∞·ª£t m√†
    });
    // Optional: B·∫°n c√≥ th·ªÉ t·ª± ƒë·ªông m·ªü chatbox ·ªü ƒë√¢y n·∫øu mu·ªën
    // const chatBox = document.getElementById("chatBox");
    // if (chatBox.style.display === "none") {
    //     chatBox.style.display = "flex";
    //     setTimeout(() => {
    //         chatBox.classList.add("active");
    //     }, 10);
    // }
}

function chooseSubject(subject) {
    const chatBox = document.getElementById("chatBox");
    const chat = document.getElementById("chatContent");
    const chatHeader = document.querySelector(".chat-header");

    // N·∫øu c√πng m·ªôt m√¥n h·ªçc v√† chatbox ƒëang ·∫©n ‚Üí hi·ªán l·∫°i m√† kh√¥ng reset
    if (currentSubject === subject) {
        if (chatBox.style.display === "none") {
            chatBox.style.display = "flex";
            setTimeout(() => {
                chatBox.classList.add("active");
            }, 10);
        }
        return;
    }

    currentSubject = subject;
    chatHeader.innerHTML = `üí¨ Tr·ª£ l√Ω m√¥n ${subject}<span class="close-btn" onclick="closeChatBox()">‚úñ</span>`;

    if (chatBox.style.display !== "flex") {
        chatBox.style.display = "flex";
        setTimeout(() => {
            chatBox.classList.add("active");
        }, 10);
    } else {
        // ƒê·∫£m b·∫£o animation ch·∫°y l·∫°i khi chuy·ªÉn m√¥n m√† chatbox ƒëang m·ªü
        chatBox.classList.remove("active");
        setTimeout(() => {
            chatBox.classList.add("active");
        }, 10);
    }

    chat.innerHTML = ""; // X√≥a n·ªôi dung chat c≈©
    
    // Show typing indicator v√† sau ƒë√≥ hi·ªÉn th·ªã message v·ªõi typing effect
    showTypingIndicator();
    setTimeout(() => {
        hideTypingIndicator();
        appendBotMessageWithTyping(`üìö B·∫°n ƒë√£ ch·ªçn m√¥n: ${subject}. M·ªùi b·∫°n h·ªèi ho·∫∑c ch·ªçn g·ª£i √Ω d∆∞·ªõi ƒë√¢y:`);
        
        // Hi·ªÉn th·ªã suggestions sau khi typing xong
        setTimeout(() => {
            showSuggestions(subject);
        }, 1000);
    }, 1500);

    // Load l·ªãch s·ª≠ n·∫øu c√≥ (sau khi hi·ªÉn th·ªã g·ª£i √Ω)
    if (chatHistory[subject]) {
        setTimeout(() => {
            chatHistory[subject].forEach(({ role, text }) => {
                if (role === "user") appendUserMessage(text);
                else appendBotMessage(text);
            });
            chat.scrollTop = chat.scrollHeight;
        }, 2500);
    }
}

function showSuggestions(subject) {
    const chat = document.getElementById("chatContent");
    
    // L·∫•y 2-3 g·ª£i √Ω ng·∫´u nhi√™n
    const allSuggestions = suggestionList[subject] || [];
    const shuffledSuggestions = allSuggestions.sort(() => 0.5 - Math.random());
    const suggestionsToShow = shuffledSuggestions.slice(0, 3);

    const chatOptionsDiv = document.createElement("div");
    chatOptionsDiv.className = "chat-options";
    chatOptionsDiv.style.opacity = "0";
    chatOptionsDiv.style.transform = "translateY(20px)";

    suggestionsToShow.forEach((option, index) => {
        const btn = document.createElement("button");
        btn.textContent = option;
        btn.style.opacity = "0";
        btn.style.transform = "translateY(20px)";
        btn.onclick = () => {
            document.getElementById("chatInput").value = option;
            sendMessage();
        };
        chatOptionsDiv.appendChild(btn);
        
        // Animate each button
        setTimeout(() => {
            btn.style.transition = "all 0.3s ease";
            btn.style.opacity = "1";
            btn.style.transform = "translateY(0)";
        }, index * 200);
    });

    chat.appendChild(chatOptionsDiv);
    
    // Animate container
    setTimeout(() => {
        chatOptionsDiv.style.transition = "all 0.3s ease";
        chatOptionsDiv.style.opacity = "1";
        chatOptionsDiv.style.transform = "translateY(0)";
    }, 100);
    
    chat.scrollTop = chat.scrollHeight;
}

function sendMessage() {
    const input = document.getElementById("chatInput");
    const text = input.value.trim();
    if (!text || isTyping) return;

    appendUserMessage(text);
    saveChat("user", text);
    input.value = "";

    // Show typing indicator
    showTypingIndicator();
    
    // Simulate thinking time
    setTimeout(() => {
        hideTypingIndicator();
        const reply = generateBotReply(text);
        appendBotMessageWithTyping(reply);
        saveChat("bot", reply);
    }, Math.random() * 1000 + 1000); // Random delay 1-2 seconds
}

function appendUserMessage(text) {
    const chat = document.getElementById("chatContent");
    const msg = document.createElement("div");
    msg.className = "user-message";
    msg.textContent = text;
    msg.style.opacity = "0";
    msg.style.transform = "translateX(50px)";
    chat.appendChild(msg);
    
    // Animate message
    setTimeout(() => {
        msg.style.transition = "all 0.3s ease";
        msg.style.opacity = "1";
        msg.style.transform = "translateX(0)";
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function appendBotMessage(text) {
    const chat = document.getElementById("chatContent");
    const msg = document.createElement("div");
    msg.className = "bot-message";
    msg.innerHTML = text;
    msg.style.opacity = "0";
    msg.style.transform = "translateX(-50px)";
    chat.appendChild(msg);
    
    // Animate message
    setTimeout(() => {
        msg.style.transition = "all 0.3s ease";
        msg.style.opacity = "1";
        msg.style.transform = "translateX(0)";
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function appendBotMessageWithTyping(text) {
    const chat = document.getElementById("chatContent");
    const msg = document.createElement("div");
    msg.className = "bot-message";
    msg.style.opacity = "0";
    msg.style.transform = "translateX(-50px)";
    chat.appendChild(msg);
    
    // Animate message appearance
    setTimeout(() => {
        msg.style.transition = "all 0.3s ease";
        msg.style.opacity = "1";
        msg.style.transform = "translateX(0)";
        
        // Start typing effect after message appears
        setTimeout(() => {
            typeMessage(msg, text, 30);
        }, 300);
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function saveChat(role, text) {
    if (!currentSubject) return;
    if (!chatHistory[currentSubject]) chatHistory[currentSubject] = [];
    chatHistory[currentSubject].push({ role, text });
}

// D·ªØ li·ªáu quiz cho t·ª´ng m√¥n h·ªçc
const quizDatabase = {
    "To√°n h·ªçc": [
        {
            question: "T·ªïng c√°c g√≥c trong tam gi√°c b·∫±ng?",
            options: ["90¬∞", "180¬∞", "270¬∞", "360¬∞"],
            correct: 1,
            explanation: "T·ªïng ba g√≥c trong m·ªôt tam gi√°c lu√¥n b·∫±ng 180¬∞"
        },
        {
            question: "2 + 2 √ó 3 = ?",
            options: ["12", "8", "6", "10"],
            correct: 1,
            explanation: "Th·ª© t·ª± th·ª±c hi·ªán: nh√¢n tr∆∞·ªõc, c·ªông sau. 2 + (2 √ó 3) = 2 + 6 = 8"
        },
        {
            question: "CƒÉn b·∫≠c hai c·ªßa 64 l√†?",
            options: ["6", "7", "8", "9"],
            correct: 2,
            explanation: "‚àö64 = 8 v√¨ 8 √ó 8 = 64"
        }
    ],
    "VƒÉn h·ªçc": [
        {
            question: "T√°c gi·∫£ c·ªßa Truy·ªán Ki·ªÅu l√† ai?",
            options: ["Nguy·ªÖn Tr√£i", "Nguy·ªÖn Du", "H·ªì Xu√¢n H∆∞∆°ng", "Nguy·ªÖn ƒê√¨nh Chi·ªÉu"],
            correct: 1,
            explanation: "Nguy·ªÖn Du l√† t√°c gi·∫£ c·ªßa t√°c ph·∫©m b·∫•t h·ªß Truy·ªán Ki·ªÅu"
        },
        {
            question: "Ch√≠ Ph√®o l√† t√°c ph·∫©m c·ªßa?",
            options: ["Nam Cao", "Ng√¥ T·∫•t T·ªë", "V≈© Tr·ªçng Ph·ª•ng", "Th·∫°ch Lam"],
            correct: 0,
            explanation: "Ch√≠ Ph√®o l√† truy·ªán ng·∫Øn n·ªïi ti·∫øng c·ªßa nh√† vƒÉn Nam Cao"
        }
    ],
    "L·ªãch s·ª≠": [
        {
            question: "Vi·ªát Nam tuy√™n b·ªë ƒë·ªôc l·∫≠p v√†o ng√†y n√†o?",
            options: ["30/4/1975", "2/9/1945", "19/5/1890", "1/1/1945"],
            correct: 1,
            explanation: "Ng√†y 2/9/1945, Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p"
        },
        {
            question: "Tr·∫≠n B·∫°ch ƒê·∫±ng nƒÉm 938 do ai ch·ªâ huy?",
            options: ["L√Ω Th√°i T·ªï", "Tr·∫ßn H∆∞ng ƒê·∫°o", "Ng√¥ Quy·ªÅn", "L√™ L·ª£i"],
            correct: 2,
            explanation: "Ng√¥ Quy·ªÅn ƒë√£ ch·ªâ huy tr·∫≠n B·∫°ch ƒê·∫±ng nƒÉm 938, ƒë√°nh b·∫°i qu√¢n Nam H√°n"
        }
    ],
    "Khoa h·ªçc": [
        {
            question: "C√¥ng th·ª©c h√≥a h·ªçc c·ªßa n∆∞·ªõc l√† g√¨?",
            options: ["H2O", "CO2", "O2", "NaCl"],
            correct: 0,
            explanation: "H2O l√† c√¥ng th·ª©c h√≥a h·ªçc c·ªßa n∆∞·ªõc (2 nguy√™n t·ª≠ Hydro + 1 nguy√™n t·ª≠ Oxy)"
        },
        {
            question: "Qu√° tr√¨nh quang h·ª£p t·∫°o ra kh√≠ g√¨?",
            options: ["CO2", "N2", "O2", "H2"],
            correct: 2,
            explanation: "Quang h·ª£p t·∫°o ra kh√≠ Oxy (O2) v√† gi·∫£i ph√≥ng v√†o kh√¥ng kh√≠"
        }
    ],
    "Ngo·∫°i ng·ªØ": [
        {
            question: "Th√¨ hi·ªán t·∫°i ƒë∆°n c·ªßa 'I' + 'go' l√† g√¨?",
            options: ["I goes", "I go", "I going", "I went"],
            correct: 1,
            explanation: "V·ªõi ch·ªß ng·ªØ 'I', ƒë·ªông t·ª´ 'go' kh√¥ng th√™m 's'"
        },
        {
            question: "'Much' d√πng v·ªõi danh t·ª´ g√¨?",
            options: ["ƒê·∫øm ƒë∆∞·ª£c", "Kh√¥ng ƒë·∫øm ƒë∆∞·ª£c", "C·∫£ hai", "Kh√¥ng d√πng ƒë∆∞·ª£c"],
            correct: 1,
            explanation: "'Much' d√πng v·ªõi danh t·ª´ kh√¥ng ƒë·∫øm ƒë∆∞·ª£c (much water, much time)"
        }
    ]
};

let currentQuiz = null;
let quizScore = 0;
let quizTotal = 0;

function startQuiz(subject) {
    if (!quizDatabase[subject]) {
        appendBotMessageWithTyping("‚ùå Xin l·ªói, ch∆∞a c√≥ quiz cho m√¥n n√†y!");
        return;
    }
    
    const questions = quizDatabase[subject];
    const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
    currentQuiz = randomQuestion;
    
    appendBotMessageWithTyping(`üß© <strong>Quiz ${subject}</strong><br><br>‚ùì ${randomQuestion.question}`);
    
    setTimeout(() => {
        showQuizOptions(randomQuestion.options);
    }, 1500);
}

function showQuizOptions(options) {
    const chat = document.getElementById("chatContent");
    const quizOptionsDiv = document.createElement("div");
    quizOptionsDiv.className = "quiz-options";
    quizOptionsDiv.style.opacity = "0";
    quizOptionsDiv.style.transform = "translateY(20px)";
    
    options.forEach((option, index) => {
        const btn = document.createElement("button");
        btn.className = "quiz-button";
        btn.innerHTML = `<span class="quiz-letter">${String.fromCharCode(65 + index)}</span> ${option}`;
        btn.style.opacity = "0";
        btn.style.transform = "translateY(20px)";
        btn.onclick = () => checkQuizAnswer(index, btn);
        quizOptionsDiv.appendChild(btn);
        
        setTimeout(() => {
            btn.style.transition = "all 0.3s ease";
            btn.style.opacity = "1";
            btn.style.transform = "translateY(0)";
        }, index * 200);
    });
    
    chat.appendChild(quizOptionsDiv);
    
    setTimeout(() => {
        quizOptionsDiv.style.transition = "all 0.3s ease";
        quizOptionsDiv.style.opacity = "1";
        quizOptionsDiv.style.transform = "translateY(0)";
    }, 100);
    
    chat.scrollTop = chat.scrollHeight;
}

function checkQuizAnswer(selectedIndex, buttonElement) {
    if (!currentQuiz) return;
    
    const isCorrect = selectedIndex === currentQuiz.correct;
    const allButtons = document.querySelectorAll('.quiz-button');
    
    // Disable all buttons
    allButtons.forEach(btn => btn.onclick = null);
    
    // Show correct/incorrect
    if (isCorrect) {
        buttonElement.classList.add('quiz-correct');
        quizScore++;
        setTimeout(() => {
            appendBotMessageWithTyping(`‚úÖ <strong>Ch√≠nh x√°c!</strong><br><br>üí° ${currentQuiz.explanation}`);
        }, 500);
    } else {
        buttonElement.classList.add('quiz-incorrect');
        allButtons[currentQuiz.correct].classList.add('quiz-correct');
        setTimeout(() => {
            appendBotMessageWithTyping(`‚ùå <strong>Ch∆∞a ƒë√∫ng!</strong><br><br>üí° ${currentQuiz.explanation}<br><br>ƒê√°p √°n ƒë√∫ng l√†: <strong>${String.fromCharCode(65 + currentQuiz.correct)}</strong>`);
        }, 500);
    }
    
    quizTotal++;
    currentQuiz = null;
    
    // Show next quiz option
    setTimeout(() => {
        showQuizContinueOptions();
    }, 3000);
}

function showQuizContinueOptions() {
    const chat = document.getElementById("chatContent");
    const continueDiv = document.createElement("div");
    continueDiv.className = "quiz-continue";
    continueDiv.innerHTML = `
        <p>üìä ƒêi·ªÉm hi·ªán t·∫°i: ${quizScore}/${quizTotal}</p>
        <button onclick="startQuiz(currentSubject)" class="quiz-continue-btn">
            üîÑ C√¢u ti·∫øp theo
        </button>
        <button onclick="showQuizScore()" class="quiz-continue-btn">
            üìà Xem ƒëi·ªÉm t·ªïng k·∫øt
        </button>
    `;
    
    chat.appendChild(continueDiv);
    chat.scrollTop = chat.scrollHeight;
}

function showQuizScore() {
    const percentage = Math.round((quizScore / quizTotal) * 100);
    let message = `üéØ <strong>K·∫øt qu·∫£ Quiz</strong><br><br>`;
    message += `üìä ƒêi·ªÉm s·ªë: ${quizScore}/${quizTotal} (${percentage}%)<br><br>`;
    
    if (percentage >= 80) {
        message += `üåü Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c!`;
    } else if (percentage >= 60) {
        message += `üëç Kh√° t·ªët! H√£y √¥n luy·ªán th√™m ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ cao h∆°n!`;
    } else {
        message += `üí™ H√£y c·ªë g·∫Øng h·ªçc th√™m! B·∫°n c√≥ th·ªÉ l√†m t·ªët h∆°n!`;
    }
    
    appendBotMessageWithTyping(message);
}

// Update generateBotReply function to include quiz
function generateBotReply(text) {
    if (!currentSubject) return "ü§ñ Vui l√≤ng ch·ªçn m√¥n h·ªçc tr∆∞·ªõc nh√©.";

    // Check for quiz keywords
    if (text.toLowerCase().includes("quiz") || text.toLowerCase().includes("ki·ªÉm tra") || text.toLowerCase().includes("thi")) {
        startQuiz(currentSubject);
        return ""; // Don't return anything as startQuiz handles the response
    }

    const repo = replyDatabase[currentSubject];
    for (let key in repo) {
        if (text.toLowerCase().includes(key.toLowerCase())) {
            return repo[key];
        }
    }

    return `ü§ñ M√¨nh ch∆∞a r√µ c√¢u h·ªèi. B·∫°n ƒëang h·ªèi v·ªÅ m√¥n ${currentSubject}. H√£y th·ª≠ m·ªôt trong c√°c g·ª£i √Ω ho·∫∑c g√µ "quiz" ƒë·ªÉ l√†m b√†i ki·ªÉm tra nh√©!`;
}

function closeChatBox() {
    const chatBox = document.getElementById("chatBox");
    chatBox.classList.remove("active");
    setTimeout(() => {
        chatBox.style.display = "none";
    }, 400);
    // currentSubject = ""; // Kh√¥ng reset currentSubject ƒë·ªÉ gi·ªØ l·ªãch s·ª≠ khi m·ªü l·∫°i
}

function resetChat() {
    const chat = document.getElementById("chatContent");
    chat.innerHTML = "";
    if (currentSubject) chatHistory[currentSubject] = [];
    appendBotMessage(`üßπ B·∫°n ƒë√£ l√†m m·ªõi h·ªôi tho·∫°i m√¥n ${currentSubject}.`);
    // Th√™m l·∫°i g·ª£i √Ω sau khi reset
    const allSuggestions = suggestionList[currentSubject] || [];
    const shuffledSuggestions = allSuggestions.sort(() => 0.5 - Math.random());
    const suggestionsToShow = shuffledSuggestions.slice(0, 3);

    const chatOptionsDiv = document.createElement("div");
    chatOptionsDiv.className = "chat-options";

    suggestionsToShow.forEach(option => {
        const btn = document.createElement("button");
        btn.textContent = option;
        btn.onclick = () => {
            document.getElementById("chatInput").value = option;
            sendMessage();
        };
        chatOptionsDiv.appendChild(btn);
    });

    chat.appendChild(chatOptionsDiv);
}

// ƒê√≥ng chat n·∫øu click b√™n ngo√†i (tr·ª´ n√∫t m√¥n h·ªçc v√† n√∫t CTA)
document.addEventListener("click", function (e) {
    const chatBox = document.getElementById("chatBox");
    const isClickInsideChatBox = chatBox.contains(e.target);
    const isClickOnSubjectCard = e.target.closest(".subject-card");
    const isClickOnCTAButton = e.target.closest(".cta-button"); // Th√™m ki·ªÉm tra n√∫t CTA

    if (
        chatBox.style.display === "flex" &&
        !isClickInsideChatBox &&
        !isClickOnSubjectCard &&
        !isClickOnCTAButton
    ) {
        closeChatBox();
    }
});


// G·ª≠i tin nh·∫Øn khi nh·∫•n Enter
document.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && document.activeElement.id === "chatInput") {
        sendMessage();
    }
});

// Th√™m n√∫t Reset
setTimeout(() => {
    const inputBox = document.querySelector(".chat-input");
    if (inputBox && !document.getElementById("resetBtn")) {
        const resetBtn = document.createElement("button");
        resetBtn.id = "resetBtn";
        resetBtn.textContent = "Reset";
        resetBtn.onclick = resetChat;
        inputBox.appendChild(resetBtn);
    }
}, 1000); // ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ ƒë√£ load tr∆∞·ªõc khi th√™m n√∫t

// D·ªØ li·ªáu g·ª£i √Ω v√† c√¢u tr·∫£ l·ªùi
const suggestionList = {
    "To√°n h·ªçc": [
        "üß© Quiz To√°n h·ªçc",
        "Gi·∫£i ph∆∞∆°ng tr√¨nh x + 5 = 10",
        "T·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn 100",
        "Di·ªán t√≠ch h√¨nh tr√≤n",
        "C√¥ng th·ª©c chu vi h√¨nh ch·ªØ nh·∫≠t",
        "Ph√©p chia c√≥ d∆∞ l√† g√¨?",
        "S·ªë nguy√™n t·ªë l√† g√¨?",
        "T√≠nh 7 x 8",
        "Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh",
        "H√†m s·ªë l√† g√¨?",
        "ƒê·∫°o h√†m l√† g√¨?",
        "T√≠ch ph√¢n c∆° b·∫£n",
        "Gi·∫£i b·∫•t ph∆∞∆°ng tr√¨nh",
        "T√≠nh g√≥c tam gi√°c ƒë·ªÅu",
        "S·ªë pi l√† bao nhi√™u?",
        "ƒê·ªãnh l√Ω Pitago",
        "X√°c su·∫•t trong tung ƒë·ªìng xu",
        "Th·ªëng k√™ m√¥ t·∫£",
        "Ma tr·∫≠n l√† g√¨?",
        "Gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c 2",
        "S·ªë h·ªçc v√† ƒë·∫°i s·ªë kh√°c nhau th·∫ø n√†o?"
    ],
    "VƒÉn h·ªçc": [
        "üß© Quiz VƒÉn h·ªçc",
        "Ph√¢n t√≠ch Truy·ªán Ki·ªÅu",
        "T√≥m t·∫Øt Ch√≠ Ph√®o",
        "C·∫£m nh·∫≠n b√†i Vi·ªát B·∫Øc",
        "Phong c√°ch ngh·ªá thu·∫≠t Nguy·ªÖn Du",
        "So s√°nh th∆° x∆∞a v√† nay",
        "Ngh·ªã lu·∫≠n x√£ h·ªôi l√† g√¨?",
        "VƒÉn bi·ªÉu c·∫£m l√† g√¨?",
        "Ng·ªØ ph√°p ti·∫øng Vi·ªát c√≥ g√¨ ƒë·∫∑c bi·ªát?",
        "C·∫£m x√∫c trong th∆° H√†n M·∫∑c T·ª≠",
        "√ù nghƒ©a b√†i th∆° T·ªè l√≤ng",
        "T√≥m t·∫Øt truy·ªán L√£o H·∫°c",
        "Gi√° tr·ªã nh√¢n ƒë·∫°o c·ªßa V·ª£ Nh·∫∑t",
        "Phong c√°ch th∆° Xu√¢n Di·ªáu",
        "Ng√¥n ng·ªØ trong k·ªãch n√≥i",
        "So s√°nh Truy·ªán Ki·ªÅu v√† L·ª•c V√¢n Ti√™n",
        "H·ªìi k√Ω vƒÉn h·ªçc l√† g√¨?",
        "Ch·ª©c nƒÉng c·ªßa ·∫©n d·ª•",
        "N√™u c·∫£m nh·∫≠n v·ªÅ ƒëo·∫°n th∆° em th√≠ch",
        "V√¨ sao c·∫ßn h·ªçc vƒÉn?",
        "VƒÉn ngh·ªã lu·∫≠n v√† bi·ªÉu c·∫£m kh√°c nhau th·∫ø n√†o?"
    ],
    "L·ªãch s·ª≠": [
        "üß© Quiz L·ªãch s·ª≠",
        "T√≥m t·∫Øt s·ª± ki·ªán 2/9/1945",
        "Nguy√™n nh√¢n chi·∫øn tranh th·∫ø gi·ªõi 1",
        "C√°c tri·ªÅu ƒë·∫°i phong ki·∫øn VN",
        "Phong tr√†o C·∫ßn V∆∞∆°ng",
        "√ù nghƒ©a C√°ch m·∫°ng th√°ng T√°m",
        "Kh√°ng chi·∫øn ch·ªëng Ph√°p",
        "Th·ªùi k·ª≥ B·∫Øc thu·ªôc",
        "Nh·ªØng th√†nh t·ª±u th·ªùi L√Ω",
        "Tr·∫≠n B·∫°ch ƒê·∫±ng",
        "L·ªãch s·ª≠ ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam",
        "Vai tr√≤ H·ªì Ch√≠ Minh",
        "S·ª± ki·ªán 30/4/1975",
        "Chi·∫øn tranh l·∫°nh l√† g√¨?",
        "S·ª± h√¨nh th√†nh ASEAN",
        "C·∫£i c√°ch ru·ªông ƒë·∫•t",
        "Hi·ªáp ƒë·ªãnh Gen√®ve 1954",
        "Ch·ªß nghƒ©a t∆∞ b·∫£n l√† g√¨?",
        "X√£ h·ªôi nguy√™n th·ªßy",
        "C√°ch m·∫°ng c√¥ng nghi·ªáp l·∫ßn 1",
        "Th·∫ø gi·ªõi sau WW2"
    ],
    "Khoa h·ªçc": [
        "üß© Quiz Khoa h·ªçc",
        "T·∫°i sao tr·ªùi m∆∞a?",
        "N∆∞·ªõc s√¥i ·ªü bao nhi√™u ƒë·ªô?",
        "Chu tr√¨nh carbon",
        "L·ª±c h·∫•p d·∫´n l√† g√¨?",
        "T·∫ø b√†o ƒë·ªông v·∫≠t v√† th·ª±c v·∫≠t kh√°c nhau?",
        "Quang h·ª£p l√† g√¨?",
        "ƒê·ªông ƒë·∫•t x·∫£y ra do ƒë√¢u?",
        "C·∫•u tr√∫c nguy√™n t·ª≠",
        "Hi·ªán t∆∞·ª£ng kh√∫c x·∫° √°nh s√°ng",
        "C·∫£m bi·∫øn nhi·ªát ƒë·ªô",
        "Pin ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
        "Ph·∫£n ·ª©ng ho√° h·ªçc l√† g√¨?",
        "H·ªá M·∫∑t Tr·ªùi c√≥ bao nhi√™u h√†nh tinh?",
        "Tr√°i ƒê·∫•t quay quanh M·∫∑t Tr·ªùi bao l√¢u?",
        "DNA l√† g√¨?",
        "Nhi·ªát ƒë·ªô √¢m l√† g√¨?",
        "√Åp su·∫•t kh√≠ quy·ªÉn",
        "Th·ª±c ph·∫©m bi·∫øn ƒë·ªïi gen",
        "C√¥ng ngh·ªá AI ho·∫°t ƒë·ªông th·∫ø n√†o?",
        "T·∫°i sao √°nh s√°ng tr·∫Øng ph√¢n t√°ch?"
    ],
    "Ngo·∫°i ng·ªØ": [
        "üß© Quiz Ngo·∫°i ng·ªØ",
        "D·ªãch c√¢u: I love learning",
        "C√°ch d√πng th√¨ hi·ªán t·∫°i ƒë∆°n",
        "T·ª´ v·ª±ng ch·ªß ƒë·ªÅ tr∆∞·ªùng h·ªçc",
        "Ph√¢n bi·ªát much v√† many",
        "T√≠nh t·ª´ trong ti·∫øng Anh",
        "C√¢u b·ªã ƒë·ªông",
        "M·ªánh ƒë·ªÅ quan h·ªá",
        "C√¢u ƒëi·ªÅu ki·ªán lo·∫°i 1",
        "So s√°nh h∆°n v√† nh·∫•t",
        "Tr·∫≠t t·ª± t√≠nh t·ª´",
        "T·ª´ n·ªëi (linking words)",
        "Th√¨ qu√° kh·ª© ti·∫øp di·ªÖn",
        "Gi·ªõi t·ª´ ch·ªâ th·ªùi gian",
        "C√°ch ph√°t √¢m ƒëu√¥i -s, -ed",
        "T·ª´ v·ª±ng ch·ªß ƒë·ªÅ gia ƒë√¨nh",
        "C√°ch vi·∫øt email b·∫±ng ti·∫øng Anh",
        "T·ª´ v·ª±ng ti·∫øng Anh l·ªõp 6",
        "S·ª± kh√°c nhau gi·ªØa say v√† tell",
        "C·∫•u tr√∫c prefer to V",
        "Idioms th√¥ng d·ª•ng"
    ]
};

const replyDatabase = {
    "To√°n h·ªçc": {
        "ph∆∞∆°ng tr√¨nh": "‚úèÔ∏è V√≠ d·ª•: x + 5 = 10 ‚áí x = 5.",
        "t·ªïng": "üî¢ T·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn n: n(n+1)/2.",
        "di·ªán t√≠ch": "üìê Di·ªán t√≠ch h√¨nh tr√≤n: S = œÄ √ó r¬≤.",
        "chu vi": "üìè Chu vi h√¨nh ch·ªØ nh·∫≠t = 2 √ó (d√†i + r·ªông).",
        "chia c√≥ d∆∞": "‚ûó L√† ph√©p chia m√† ph·∫ßn d∆∞ kh√°c 0.",
        "nguy√™n t·ªë": "üî¢ L√† s·ªë ch·ªâ chia h·∫øt cho 1 v√† ch√≠nh n√≥.",
        "ma tr·∫≠n": "üìò Ma tr·∫≠n l√† b·∫£ng s·ªë d√πng trong ƒë·∫°i s·ªë tuy·∫øn t√≠nh.",
        "x√°c su·∫•t": "üé≤ X√°c su·∫•t tung ƒë·ªìng xu ra m·∫∑t ng·ª≠a l√† 0.5.",
        "pi": "œÄ ‚âà 3.14159",
        "pitago": "üåü a¬≤ + b¬≤ = c¬≤ trong tam gi√°c vu√¥ng.",
        "ƒë·∫°o h√†m": "üìâ Bi·ªÉu th·ªã t·ªëc ƒë·ªô thay ƒë·ªïi c·ªßa h√†m s·ªë.",
        "t√≠ch ph√¢n": "üìä Di·ªán t√≠ch d∆∞·ªõi ƒë∆∞·ªùng cong.",
        "g√≥c tam gi√°c ƒë·ªÅu": "üî∫ M·ªói g√≥c = 60¬∞.",
        "b·∫•t ph∆∞∆°ng tr√¨nh": "üö¶ L√† bi·ªÉu th·ª©c c√≥ d·∫•u <, >, ‚â§, ‚â•.",
        "h·ªá ph∆∞∆°ng tr√¨nh": "üîß T·∫≠p h·ª£p nhi·ªÅu ph∆∞∆°ng tr√¨nh gi·∫£i c√πng l√∫c.",
        "ƒë·∫°i s·ªë": "üìê ƒê·∫°i s·ªë nghi√™n c·ª©u bi·ªÉu th·ª©c v√† ph∆∞∆°ng tr√¨nh.",
        "s·ªë h·ªçc": "‚ûï Li√™n quan ƒë·∫øn t√≠nh to√°n c∆° b·∫£n v·ªõi s·ªë.",
        "h√†m s·ªë": "f(x) l√† h√†m s·ªë n·∫øu m·ªói x ch·ªâ c√≥ m·ªôt y.",
        "gi·∫£i b·∫≠c 2": "ax¬≤ + bx + c = 0 ‚áí Œî = b¬≤ - 4ac.",
        "th·ªëng k√™": "üìà Ph√¢n t√≠ch d·ªØ li·ªáu thu th·∫≠p ƒë∆∞·ª£c."
    },
    "VƒÉn h·ªçc": {
        "truy·ªán ki·ªÅu": "üìö Ki·ªát t√°c c·ªßa Nguy·ªÖn Du n√≥i v·ªÅ bi k·ªãch v√† t√†i nƒÉng.",
        "ch√≠ ph√®o": "üìù Bi k·ªãch ng∆∞·ªùi n√¥ng d√¢n d∆∞·ªõi ch·∫ø ƒë·ªô th·ª±c d√¢n phong ki·∫øn.",
        "vi·ªát b·∫Øc": "üé§ T√¨nh c·∫£m g·∫Øn b√≥ gi·ªØa ƒë·ªìng b√†o v√† c√°n b·ªô kh√°ng chi·∫øn.",
        "phong c√°ch": "üí° Phong c√°ch l√† c√°ch th·ªÉ hi·ªán ri√™ng bi·ªát c·ªßa nh√† vƒÉn.",
        "th∆°": "üñãÔ∏è D·∫°ng vƒÉn h·ªçc c√≥ v·∫ßn ƒëi·ªáu, c·∫£m x√∫c.",
        "ngh·ªã lu·∫≠n": "üí¨ Tr√¨nh b√†y suy nghƒ© v·ªÅ v·∫•n ƒë·ªÅ x√£ h·ªôi.",
        "bi·ªÉu c·∫£m": "‚ù§Ô∏è Tr√¨nh b√†y c·∫£m x√∫c, suy nghƒ© ch·ªß quan.",
        "·∫©n d·ª•": "üåø D√πng h√¨nh ·∫£nh kh√°c ƒë·ªÉ n√≥i ƒë·∫øn ƒëi·ªÅu mu·ªën n√≥i.",
        "xu√¢n di·ªáu": "üíò Nh√† th∆° c·ªßa t√¨nh y√™u v√† th·ªùi gian.",
        "t·ªè l√≤ng": "‚öîÔ∏è B√†i th∆° y√™u n∆∞·ªõc c·ªßa Ph·∫°m Ng≈© L√£o.",
        "v·ª£ nh·∫∑t": "ü•£ Ph·∫£n √°nh n·∫°n ƒë√≥i 1945 v√† nh√¢n ph·∫©m con ng∆∞·ªùi.",
        "l√£o h·∫°c": "üë¥ L√£o H·∫°c b√°n ch√≥ v√¨ th∆∞∆°ng con, s·ªëng nh√¢n h·∫≠u.",
        "so s√°nh": "üîç Ph√©p tu t·ª´ ch·ªâ s·ª± gi·ªëng nhau gi·ªØa hai ƒë·ªëi t∆∞·ª£ng.",
        "h·ªìi k√Ω": "üìñ Ghi l·∫°i tr·∫£i nghi·ªám th·∫≠t c·ªßa ng∆∞·ªùi vi·∫øt.",
        "t√¨nh c·∫£m": "üíì Ch·ªß ƒë·ªÅ th∆∞·ªùng g·∫∑p trong vƒÉn th∆°.",
        "ng√¥n ng·ªØ": "üó£Ô∏è C√¥ng c·ª• ch√≠nh c·ªßa vƒÉn h·ªçc.",
        "vƒÉn ngh·ªã lu·∫≠n": "‚öñÔ∏è Tr√¨nh b√†y l√Ω l·∫Ω, d·∫´n ch·ª©ng, ph·∫£n bi·ªán.",
        "ng·ªØ ph√°p": "üî† C·∫•u tr√∫c c√¢u trong ti·∫øng Vi·ªát.",
        "c·∫£m x√∫c": "üé≠ L√† y·∫øu t·ªë t·∫°o n√™n h·ªìn vƒÉn h·ªçc.",
        "t·ª´ ng·ªØ": "üìù V·ªën t·ª´ phong ph√∫ gi√∫p di·ªÖn ƒë·∫°t hay h∆°n."
    },
    "L·ªãch s·ª≠": {
        "2/9": "üáªüá≥ Ng√†y Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p.",
        "chi·∫øn tranh th·∫ø gi·ªõi": "üåç X·∫£y ra do tranh ch·∫•p quy·ªÅn l·ª±c gi·ªØa c√°c n∆∞·ªõc l·ªõn.",
        "tri·ªÅu ƒë·∫°i": "üëë C√°c tri·ªÅu ƒë·∫°i Vi·ªát: L√Ω, Tr·∫ßn, L√™, Nguy·ªÖn...",
        "c·∫ßn v∆∞∆°ng": "üéØ Phong tr√†o ch·ªëng Ph√°p k√™u g·ªçi trung th√†nh v·ªõi vua.",
        "30/4": "‚úä Gi·∫£i ph√≥ng mi·ªÅn Nam, th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc 1975.",
        "th√°ng t√°m": "üìÖ C√°ch m·∫°ng 1945 l·∫≠t ƒë·ªï ch√≠nh ph·ªß b√π nh√¨n.",
        "ph√°p thu·ªôc": "üó∫Ô∏è Vi·ªát Nam b·ªã ƒë√¥ h·ªô g·∫ßn 100 nƒÉm.",
        "b·∫Øc thu·ªôc": "üß≠ Th·ªùi k·ª≥ b·ªã ph∆∞∆°ng B·∫Øc x√¢m l∆∞·ª£c v√† ƒë√¥ h·ªô.",
        "tr·∫≠n b·∫°ch ƒë·∫±ng": "‚öì Chi·∫øn th·∫Øng l·ªõn c·ªßa Ng√¥ Quy·ªÅn, L√™ Ho√†n v√† Tr·∫ßn H∆∞ng ƒê·∫°o.",
        "hi·ªáp ƒë·ªãnh gen√®ve": "‚úçÔ∏è Chia Vi·ªát Nam th√†nh 2 mi·ªÅn t·∫°m th·ªùi nƒÉm 1954.",
        "ch·ªß nghƒ©a t∆∞ b·∫£n": "üíº H·ªá th·ªëng kinh t·∫ø d·ª±a v√†o s·ªü h·ªØu t∆∞ nh√¢n.",
        "li√™n x√¥": "üåè C∆∞·ªùng qu·ªëc XHCN l·ªõn nh·∫•t th·∫ø k·ª∑ 20.",
        "h·ªì ch√≠ minh": "üë®‚Äçüè´ Ng∆∞·ªùi s√°ng l·∫≠p n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a.",
        "ƒë·∫£ng c·ªông s·∫£n": "‚öíÔ∏è T·ªï ch·ª©c l√£nh ƒë·∫°o c√°ch m·∫°ng VN.",
        "ASEAN": "üåê Hi·ªáp h·ªôi c√°c qu·ªëc gia ƒê√¥ng Nam √Å.",
        "x√£ h·ªôi nguy√™n th·ªßy": "ü™ì Giai ƒëo·∫°n ƒë·∫ßu c·ªßa l·ªãch s·ª≠ lo√†i ng∆∞·ªùi.",
        "c√¥ng nghi·ªáp": "üè≠ C√°ch m·∫°ng t·∫°o b∆∞·ªõc nh·∫£y v·ªçt c√¥ng ngh·ªá.",
        "ƒë·ªïi m·ªõi": "üîÑ Ch√≠nh s√°ch ph√°t tri·ªÉn ƒë·∫•t n∆∞·ªõc sau 1986.",
        "l·ªãch s·ª≠ th·∫ø gi·ªõi": "üåé Bao g·ªìm c√°c n·ªÅn vƒÉn minh l·ªõn: Ai C·∫≠p, La M√£, Trung Hoa.",
        "th·∫ø gi·ªõi sau chi·∫øn tranh": "üåê H√¨nh th√†nh 2 c·ª±c: Li√™n X√¥ v√† M·ªπ."
    },
    "Khoa h·ªçc": {
        "tr·ªùi m∆∞a": "üåßÔ∏è Do h∆°i n∆∞·ªõc ng∆∞ng t·ª• t·∫°o th√†nh m√¢y r·ªìi m∆∞a.",
        "n∆∞·ªõc s√¥i": "üíß 100¬∞C ·ªü √°p su·∫•t th∆∞·ªùng.",
        "carbon": "üî¨ Cacbon di chuy·ªÉn qua sinh v·∫≠t v√† kh√≠ quy·ªÉn.",
        "quang h·ª£p": "üå± Qu√° tr√¨nh t·∫°o ra O2 v√† ƒë∆∞·ªùng t·ª´ CO‚ÇÇ v√† √°nh s√°ng.",
        "t·∫ø b√†o": "üî¨ ƒê∆°n v·ªã c∆° b·∫£n c·ªßa s·ª± s·ªëng.",
        "l·ª±c h·∫•p d·∫´n": "üåç L·ª±c h√∫t gi·ªØa m·ªçi v·∫≠t c√≥ kh·ªëi l∆∞·ª£ng.",
        "ƒë·ªông ƒë·∫•t": "üåè Do s·ª± d·ªãch chuy·ªÉn c·ªßa c√°c m·∫£ng ki·∫øn t·∫°o.",
        "kh√∫c x·∫°": "üåà √Ånh s√°ng ƒë·ªïi h∆∞·ªõng khi ƒëi qua ch·∫•t kh√°c nhau.",
        "pin": "üîã Thi·∫øt b·ªã chuy·ªÉn h√≥a nƒÉng l∆∞·ª£ng h√≥a h·ªçc th√†nh ƒëi·ªán.",
        "ph·∫£n ·ª©ng ho√° h·ªçc": "üß™ S·ª± bi·∫øn ƒë·ªïi ch·∫•t n√†y th√†nh ch·∫•t kh√°c.",
        "nguy√™n t·ª≠": "üß¨ C·∫•u t·∫°o b·ªüi proton, neutron, electron.",
        "nhi·ªát ƒë·ªô √¢m": "‚ùÑÔ∏è D∆∞·ªõi 0¬∞C, d√πng trong nghi√™n c·ª©u v√† b·∫£o qu·∫£n.",
        "h√†nh tinh": "ü™ê Sao quay quanh M·∫∑t Tr·ªùi (v√≠ d·ª•: Tr√°i ƒê·∫•t, Sao H·ªèa).",
        "DNA": "üß¨ V·∫≠t li·ªáu di truy·ªÅn trong sinh v·∫≠t s·ªëng.",
        "√°p su·∫•t": "üå™Ô∏è L·ª±c t√°c ƒë·ªông tr√™n m·ªôt ƒë∆°n v·ªã di·ªán t√≠ch.",
        "√°nh s√°ng tr·∫Øng": "üåû T·∫≠p h·ª£p c·ªßa nhi·ªÅu m√†u (c·∫ßu v·ªìng).",
        "AI": "ü§ñ Tr√≠ tu·ªá nh√¢n t·∫°o m√¥ ph·ªèng t∆∞ duy con ng∆∞·ªùi.",
        "gen bi·∫øn ƒë·ªïi": "üåΩ Sinh v·∫≠t c√≥ ADN b·ªã thay ƒë·ªïi.",
        "sensor nhi·ªát": "üå°Ô∏è Thi·∫øt b·ªã ƒëo nhi·ªát ƒë·ªô.",
        "v·∫≠t l√Ω": "‚öõÔ∏è Ng√†nh nghi√™n c·ª©u c√°c ƒë·ªãnh lu·∫≠t t·ª± nhi√™n."
    },
    "Ngo·∫°i ng·ªØ": {
        "i love learning": "‚ù§Ô∏è D·ªãch: T√¥i y√™u vi·ªác h·ªçc.",
        "hi·ªán t·∫°i ƒë∆°n": "‚åõ S + V(s/es). V√≠ d·ª•: She works, they play.",
        "t·ª´ v·ª±ng": "üìò School, teacher, student, book...",
        "much": "Much d√πng cho danh t·ª´ kh√¥ng ƒë·∫øm ƒë∆∞·ª£c.",
        "many": "Many d√πng cho danh t·ª´ ƒë·∫øm ƒë∆∞·ª£c.",
        "t√≠nh t·ª´": "Happy, big, red... d√πng ƒë·ªÉ m√¥ t·∫£.",
        "b·ªã ƒë·ªông": "S + to be + V3/ed.",
        "m·ªánh ƒë·ªÅ": "Who, which, that... ƒë·ªÉ n·ªëi th√¥ng tin.",
        "ƒëi·ªÅu ki·ªán": "If + S + V, S + will/can...",
        "so s√°nh": "Taller, more beautiful, the most.",
        "t√≠nh t·ª´ k√©p": "A beautiful big red car.",
        "li√™n t·ª´": "However, therefore, because...",
        "qu√° kh·ª© ti·∫øp di·ªÖn": "S + was/were + V-ing.",
        "gi·ªõi t·ª´": "In, on, at ch·ªâ th·ªùi gian v√† n∆°i ch·ªën.",
        "ƒëu√¥i ed": "Ph√°t √¢m: /id/, /t/, /d/ t√πy ƒë·ªông t·ª´.",
        "gia ƒë√¨nh": "Father, mother, sister...",
        "email": "Dear..., I hope you are well...",
        "say tell": "Say + something, Tell + someone + something.",
        "prefer": "Prefer to V: I prefer to read.",
        "idiom": "Break a leg = Ch√∫c may m·∫Øn!"
    }
};

// Load theme when page loads
document.addEventListener('DOMContentLoaded', function() {
    loadTheme();
=======
let currentSubject = "";
let chatHistory = {}; // L∆∞u l·ªãch s·ª≠ t·ª´ng m√¥n
let isTyping = false; // ƒê·ªÉ ki·ªÉm so√°t typing animation

// Dark Mode Toggle Function
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    
    body.classList.toggle('dark');
    
    // ƒê·ªïi icon
    if (body.classList.contains('dark')) {
        themeIcon.className = 'fas fa-sun';
        localStorage.setItem('theme', 'dark');
    } else {
        themeIcon.className = 'fas fa-moon';
        localStorage.setItem('theme', 'light');
    }
}

// Load saved theme on page load
function loadTheme() {
    const savedTheme = localStorage.getItem('theme');
    const body = document.body;
    const themeIcon = document.getElementById('theme-icon');
    
    if (savedTheme === 'dark') {
        body.classList.add('dark');
        themeIcon.className = 'fas fa-sun';
    } else {
        themeIcon.className = 'fas fa-moon';
    }
}

// Typing Animation Function
function showTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    indicator.style.display = 'flex';
    isTyping = true;
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    indicator.style.display = 'none';
    isTyping = false;
}

function typeMessage(element, text, speed = 50) {
    element.innerHTML = '';
    let i = 0;
    
    function typeChar() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(typeChar, speed);
        }
    }
    
    typeChar();
}

// H√†m m·ªõi ƒë·ªÉ cu·ªôn l√™n ƒë·∫ßu trang v√† c√≥ th·ªÉ m·ªü chatbox (n·∫øu c·∫ßn)
function scrollToTopAndShowSubjects() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth' // Cu·ªôn m∆∞·ª£t m√†
    });
    // Optional: B·∫°n c√≥ th·ªÉ t·ª± ƒë·ªông m·ªü chatbox ·ªü ƒë√¢y n·∫øu mu·ªën
    // const chatBox = document.getElementById("chatBox");
    // if (chatBox.style.display === "none") {
    //     chatBox.style.display = "flex";
    //     setTimeout(() => {
    //         chatBox.classList.add("active");
    //     }, 10);
    // }
}

function chooseSubject(subject) {
    const chatBox = document.getElementById("chatBox");
    const chat = document.getElementById("chatContent");
    const chatHeader = document.querySelector(".chat-header");

    // N·∫øu c√πng m·ªôt m√¥n h·ªçc v√† chatbox ƒëang ·∫©n ‚Üí hi·ªán l·∫°i m√† kh√¥ng reset
    if (currentSubject === subject) {
        if (chatBox.style.display === "none") {
            chatBox.style.display = "flex";
            setTimeout(() => {
                chatBox.classList.add("active");
            }, 10);
        }
        return;
    }

    currentSubject = subject;
    chatHeader.innerHTML = `üí¨ Tr·ª£ l√Ω m√¥n ${subject}<span class="close-btn" onclick="closeChatBox()">‚úñ</span>`;

    if (chatBox.style.display !== "flex") {
        chatBox.style.display = "flex";
        setTimeout(() => {
            chatBox.classList.add("active");
        }, 10);
    } else {
        // ƒê·∫£m b·∫£o animation ch·∫°y l·∫°i khi chuy·ªÉn m√¥n m√† chatbox ƒëang m·ªü
        chatBox.classList.remove("active");
        setTimeout(() => {
            chatBox.classList.add("active");
        }, 10);
    }

    chat.innerHTML = ""; // X√≥a n·ªôi dung chat c≈©
    
    // Show typing indicator v√† sau ƒë√≥ hi·ªÉn th·ªã message v·ªõi typing effect
    showTypingIndicator();
    setTimeout(() => {
        hideTypingIndicator();
        appendBotMessageWithTyping(`üìö B·∫°n ƒë√£ ch·ªçn m√¥n: ${subject}. M·ªùi b·∫°n h·ªèi ho·∫∑c ch·ªçn g·ª£i √Ω d∆∞·ªõi ƒë√¢y:`);
        
        // Hi·ªÉn th·ªã suggestions sau khi typing xong
        setTimeout(() => {
            showSuggestions(subject);
        }, 1000);
    }, 1500);

    // Load l·ªãch s·ª≠ n·∫øu c√≥ (sau khi hi·ªÉn th·ªã g·ª£i √Ω)
    if (chatHistory[subject]) {
        setTimeout(() => {
            chatHistory[subject].forEach(({ role, text }) => {
                if (role === "user") appendUserMessage(text);
                else appendBotMessage(text);
            });
            chat.scrollTop = chat.scrollHeight;
        }, 2500);
    }
}

function showSuggestions(subject) {
    const chat = document.getElementById("chatContent");
    
    // L·∫•y 2-3 g·ª£i √Ω ng·∫´u nhi√™n
    const allSuggestions = suggestionList[subject] || [];
    const shuffledSuggestions = allSuggestions.sort(() => 0.5 - Math.random());
    const suggestionsToShow = shuffledSuggestions.slice(0, 3);

    const chatOptionsDiv = document.createElement("div");
    chatOptionsDiv.className = "chat-options";
    chatOptionsDiv.style.opacity = "0";
    chatOptionsDiv.style.transform = "translateY(20px)";

    suggestionsToShow.forEach((option, index) => {
        const btn = document.createElement("button");
        btn.textContent = option;
        btn.style.opacity = "0";
        btn.style.transform = "translateY(20px)";
        btn.onclick = () => {
            document.getElementById("chatInput").value = option;
            sendMessage();
        };
        chatOptionsDiv.appendChild(btn);
        
        // Animate each button
        setTimeout(() => {
            btn.style.transition = "all 0.3s ease";
            btn.style.opacity = "1";
            btn.style.transform = "translateY(0)";
        }, index * 200);
    });

    chat.appendChild(chatOptionsDiv);
    
    // Animate container
    setTimeout(() => {
        chatOptionsDiv.style.transition = "all 0.3s ease";
        chatOptionsDiv.style.opacity = "1";
        chatOptionsDiv.style.transform = "translateY(0)";
    }, 100);
    
    chat.scrollTop = chat.scrollHeight;
}

function sendMessage() {
    const input = document.getElementById("chatInput");
    const text = input.value.trim();
    if (!text || isTyping) return;

    appendUserMessage(text);
    saveChat("user", text);
    input.value = "";

    // Show typing indicator
    showTypingIndicator();
    
    // Simulate thinking time
    setTimeout(() => {
        hideTypingIndicator();
        const reply = generateBotReply(text);
        appendBotMessageWithTyping(reply);
        saveChat("bot", reply);
    }, Math.random() * 1000 + 1000); // Random delay 1-2 seconds
}

function appendUserMessage(text) {
    const chat = document.getElementById("chatContent");
    const msg = document.createElement("div");
    msg.className = "user-message";
    msg.textContent = text;
    msg.style.opacity = "0";
    msg.style.transform = "translateX(50px)";
    chat.appendChild(msg);
    
    // Animate message
    setTimeout(() => {
        msg.style.transition = "all 0.3s ease";
        msg.style.opacity = "1";
        msg.style.transform = "translateX(0)";
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function appendBotMessage(text) {
    const chat = document.getElementById("chatContent");
    const msg = document.createElement("div");
    msg.className = "bot-message";
    msg.innerHTML = text;
    msg.style.opacity = "0";
    msg.style.transform = "translateX(-50px)";
    chat.appendChild(msg);
    
    // Animate message
    setTimeout(() => {
        msg.style.transition = "all 0.3s ease";
        msg.style.opacity = "1";
        msg.style.transform = "translateX(0)";
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function appendBotMessageWithTyping(text) {
    const chat = document.getElementById("chatContent");
    const msg = document.createElement("div");
    msg.className = "bot-message";
    msg.style.opacity = "0";
    msg.style.transform = "translateX(-50px)";
    chat.appendChild(msg);
    
    // Animate message appearance
    setTimeout(() => {
        msg.style.transition = "all 0.3s ease";
        msg.style.opacity = "1";
        msg.style.transform = "translateX(0)";
        
        // Start typing effect after message appears
        setTimeout(() => {
            typeMessage(msg, text, 30);
        }, 300);
    }, 10);
    
    chat.scrollTop = chat.scrollHeight;
}

function saveChat(role, text) {
    if (!currentSubject) return;
    if (!chatHistory[currentSubject]) chatHistory[currentSubject] = [];
    chatHistory[currentSubject].push({ role, text });
}

// D·ªØ li·ªáu quiz cho t·ª´ng m√¥n h·ªçc
const quizDatabase = {
    "To√°n h·ªçc": [
        {
            question: "T·ªïng c√°c g√≥c trong tam gi√°c b·∫±ng?",
            options: ["90¬∞", "180¬∞", "270¬∞", "360¬∞"],
            correct: 1,
            explanation: "T·ªïng ba g√≥c trong m·ªôt tam gi√°c lu√¥n b·∫±ng 180¬∞"
        },
        {
            question: "2 + 2 √ó 3 = ?",
            options: ["12", "8", "6", "10"],
            correct: 1,
            explanation: "Th·ª© t·ª± th·ª±c hi·ªán: nh√¢n tr∆∞·ªõc, c·ªông sau. 2 + (2 √ó 3) = 2 + 6 = 8"
        },
        {
            question: "CƒÉn b·∫≠c hai c·ªßa 64 l√†?",
            options: ["6", "7", "8", "9"],
            correct: 2,
            explanation: "‚àö64 = 8 v√¨ 8 √ó 8 = 64"
        }
    ],
    "VƒÉn h·ªçc": [
        {
            question: "T√°c gi·∫£ c·ªßa Truy·ªán Ki·ªÅu l√† ai?",
            options: ["Nguy·ªÖn Tr√£i", "Nguy·ªÖn Du", "H·ªì Xu√¢n H∆∞∆°ng", "Nguy·ªÖn ƒê√¨nh Chi·ªÉu"],
            correct: 1,
            explanation: "Nguy·ªÖn Du l√† t√°c gi·∫£ c·ªßa t√°c ph·∫©m b·∫•t h·ªß Truy·ªán Ki·ªÅu"
        },
        {
            question: "Ch√≠ Ph√®o l√† t√°c ph·∫©m c·ªßa?",
            options: ["Nam Cao", "Ng√¥ T·∫•t T·ªë", "V≈© Tr·ªçng Ph·ª•ng", "Th·∫°ch Lam"],
            correct: 0,
            explanation: "Ch√≠ Ph√®o l√† truy·ªán ng·∫Øn n·ªïi ti·∫øng c·ªßa nh√† vƒÉn Nam Cao"
        }
    ],
    "L·ªãch s·ª≠": [
        {
            question: "Vi·ªát Nam tuy√™n b·ªë ƒë·ªôc l·∫≠p v√†o ng√†y n√†o?",
            options: ["30/4/1975", "2/9/1945", "19/5/1890", "1/1/1945"],
            correct: 1,
            explanation: "Ng√†y 2/9/1945, Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p"
        },
        {
            question: "Tr·∫≠n B·∫°ch ƒê·∫±ng nƒÉm 938 do ai ch·ªâ huy?",
            options: ["L√Ω Th√°i T·ªï", "Tr·∫ßn H∆∞ng ƒê·∫°o", "Ng√¥ Quy·ªÅn", "L√™ L·ª£i"],
            correct: 2,
            explanation: "Ng√¥ Quy·ªÅn ƒë√£ ch·ªâ huy tr·∫≠n B·∫°ch ƒê·∫±ng nƒÉm 938, ƒë√°nh b·∫°i qu√¢n Nam H√°n"
        }
    ],
    "Khoa h·ªçc": [
        {
            question: "C√¥ng th·ª©c h√≥a h·ªçc c·ªßa n∆∞·ªõc l√† g√¨?",
            options: ["H2O", "CO2", "O2", "NaCl"],
            correct: 0,
            explanation: "H2O l√† c√¥ng th·ª©c h√≥a h·ªçc c·ªßa n∆∞·ªõc (2 nguy√™n t·ª≠ Hydro + 1 nguy√™n t·ª≠ Oxy)"
        },
        {
            question: "Qu√° tr√¨nh quang h·ª£p t·∫°o ra kh√≠ g√¨?",
            options: ["CO2", "N2", "O2", "H2"],
            correct: 2,
            explanation: "Quang h·ª£p t·∫°o ra kh√≠ Oxy (O2) v√† gi·∫£i ph√≥ng v√†o kh√¥ng kh√≠"
        }
    ],
    "Ngo·∫°i ng·ªØ": [
        {
            question: "Th√¨ hi·ªán t·∫°i ƒë∆°n c·ªßa 'I' + 'go' l√† g√¨?",
            options: ["I goes", "I go", "I going", "I went"],
            correct: 1,
            explanation: "V·ªõi ch·ªß ng·ªØ 'I', ƒë·ªông t·ª´ 'go' kh√¥ng th√™m 's'"
        },
        {
            question: "'Much' d√πng v·ªõi danh t·ª´ g√¨?",
            options: ["ƒê·∫øm ƒë∆∞·ª£c", "Kh√¥ng ƒë·∫øm ƒë∆∞·ª£c", "C·∫£ hai", "Kh√¥ng d√πng ƒë∆∞·ª£c"],
            correct: 1,
            explanation: "'Much' d√πng v·ªõi danh t·ª´ kh√¥ng ƒë·∫øm ƒë∆∞·ª£c (much water, much time)"
        }
    ]
};

let currentQuiz = null;
let quizScore = 0;
let quizTotal = 0;

function startQuiz(subject) {
    if (!quizDatabase[subject]) {
        appendBotMessageWithTyping("‚ùå Xin l·ªói, ch∆∞a c√≥ quiz cho m√¥n n√†y!");
        return;
    }
    
    const questions = quizDatabase[subject];
    const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
    currentQuiz = randomQuestion;
    
    appendBotMessageWithTyping(`üß© <strong>Quiz ${subject}</strong><br><br>‚ùì ${randomQuestion.question}`);
    
    setTimeout(() => {
        showQuizOptions(randomQuestion.options);
    }, 1500);
}

function showQuizOptions(options) {
    const chat = document.getElementById("chatContent");
    const quizOptionsDiv = document.createElement("div");
    quizOptionsDiv.className = "quiz-options";
    quizOptionsDiv.style.opacity = "0";
    quizOptionsDiv.style.transform = "translateY(20px)";
    
    options.forEach((option, index) => {
        const btn = document.createElement("button");
        btn.className = "quiz-button";
        btn.innerHTML = `<span class="quiz-letter">${String.fromCharCode(65 + index)}</span> ${option}`;
        btn.style.opacity = "0";
        btn.style.transform = "translateY(20px)";
        btn.onclick = () => checkQuizAnswer(index, btn);
        quizOptionsDiv.appendChild(btn);
        
        setTimeout(() => {
            btn.style.transition = "all 0.3s ease";
            btn.style.opacity = "1";
            btn.style.transform = "translateY(0)";
        }, index * 200);
    });
    
    chat.appendChild(quizOptionsDiv);
    
    setTimeout(() => {
        quizOptionsDiv.style.transition = "all 0.3s ease";
        quizOptionsDiv.style.opacity = "1";
        quizOptionsDiv.style.transform = "translateY(0)";
    }, 100);
    
    chat.scrollTop = chat.scrollHeight;
}

function checkQuizAnswer(selectedIndex, buttonElement) {
    if (!currentQuiz) return;
    
    const isCorrect = selectedIndex === currentQuiz.correct;
    const allButtons = document.querySelectorAll('.quiz-button');
    
    // Disable all buttons
    allButtons.forEach(btn => btn.onclick = null);
    
    // Show correct/incorrect
    if (isCorrect) {
        buttonElement.classList.add('quiz-correct');
        quizScore++;
        setTimeout(() => {
            appendBotMessageWithTyping(`‚úÖ <strong>Ch√≠nh x√°c!</strong><br><br>üí° ${currentQuiz.explanation}`);
        }, 500);
    } else {
        buttonElement.classList.add('quiz-incorrect');
        allButtons[currentQuiz.correct].classList.add('quiz-correct');
        setTimeout(() => {
            appendBotMessageWithTyping(`‚ùå <strong>Ch∆∞a ƒë√∫ng!</strong><br><br>üí° ${currentQuiz.explanation}<br><br>ƒê√°p √°n ƒë√∫ng l√†: <strong>${String.fromCharCode(65 + currentQuiz.correct)}</strong>`);
        }, 500);
    }
    
    quizTotal++;
    currentQuiz = null;
    
    // Show next quiz option
    setTimeout(() => {
        showQuizContinueOptions();
    }, 3000);
}

function showQuizContinueOptions() {
    const chat = document.getElementById("chatContent");
    const continueDiv = document.createElement("div");
    continueDiv.className = "quiz-continue";
    continueDiv.innerHTML = `
        <p>üìä ƒêi·ªÉm hi·ªán t·∫°i: ${quizScore}/${quizTotal}</p>
        <button onclick="startQuiz(currentSubject)" class="quiz-continue-btn">
            üîÑ C√¢u ti·∫øp theo
        </button>
        <button onclick="showQuizScore()" class="quiz-continue-btn">
            üìà Xem ƒëi·ªÉm t·ªïng k·∫øt
        </button>
    `;
    
    chat.appendChild(continueDiv);
    chat.scrollTop = chat.scrollHeight;
}

function showQuizScore() {
    const percentage = Math.round((quizScore / quizTotal) * 100);
    let message = `üéØ <strong>K·∫øt qu·∫£ Quiz</strong><br><br>`;
    message += `üìä ƒêi·ªÉm s·ªë: ${quizScore}/${quizTotal} (${percentage}%)<br><br>`;
    
    if (percentage >= 80) {
        message += `üåü Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c!`;
    } else if (percentage >= 60) {
        message += `üëç Kh√° t·ªët! H√£y √¥n luy·ªán th√™m ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ cao h∆°n!`;
    } else {
        message += `üí™ H√£y c·ªë g·∫Øng h·ªçc th√™m! B·∫°n c√≥ th·ªÉ l√†m t·ªët h∆°n!`;
    }
    
    appendBotMessageWithTyping(message);
}

// Update generateBotReply function to include quiz
function generateBotReply(text) {
    if (!currentSubject) return "ü§ñ Vui l√≤ng ch·ªçn m√¥n h·ªçc tr∆∞·ªõc nh√©.";

    // Check for quiz keywords
    if (text.toLowerCase().includes("quiz") || text.toLowerCase().includes("ki·ªÉm tra") || text.toLowerCase().includes("thi")) {
        startQuiz(currentSubject);
        return ""; // Don't return anything as startQuiz handles the response
    }

    const repo = replyDatabase[currentSubject];
    for (let key in repo) {
        if (text.toLowerCase().includes(key.toLowerCase())) {
            return repo[key];
        }
    }

    return `ü§ñ M√¨nh ch∆∞a r√µ c√¢u h·ªèi. B·∫°n ƒëang h·ªèi v·ªÅ m√¥n ${currentSubject}. H√£y th·ª≠ m·ªôt trong c√°c g·ª£i √Ω ho·∫∑c g√µ "quiz" ƒë·ªÉ l√†m b√†i ki·ªÉm tra nh√©!`;
}

function closeChatBox() {
    const chatBox = document.getElementById("chatBox");
    chatBox.classList.remove("active");
    setTimeout(() => {
        chatBox.style.display = "none";
    }, 400);
    // currentSubject = ""; // Kh√¥ng reset currentSubject ƒë·ªÉ gi·ªØ l·ªãch s·ª≠ khi m·ªü l·∫°i
}

function resetChat() {
    const chat = document.getElementById("chatContent");
    chat.innerHTML = "";
    if (currentSubject) chatHistory[currentSubject] = [];
    appendBotMessage(`üßπ B·∫°n ƒë√£ l√†m m·ªõi h·ªôi tho·∫°i m√¥n ${currentSubject}.`);
    // Th√™m l·∫°i g·ª£i √Ω sau khi reset
    const allSuggestions = suggestionList[currentSubject] || [];
    const shuffledSuggestions = allSuggestions.sort(() => 0.5 - Math.random());
    const suggestionsToShow = shuffledSuggestions.slice(0, 3);

    const chatOptionsDiv = document.createElement("div");
    chatOptionsDiv.className = "chat-options";

    suggestionsToShow.forEach(option => {
        const btn = document.createElement("button");
        btn.textContent = option;
        btn.onclick = () => {
            document.getElementById("chatInput").value = option;
            sendMessage();
        };
        chatOptionsDiv.appendChild(btn);
    });

    chat.appendChild(chatOptionsDiv);
}

// ƒê√≥ng chat n·∫øu click b√™n ngo√†i (tr·ª´ n√∫t m√¥n h·ªçc v√† n√∫t CTA)
document.addEventListener("click", function (e) {
    const chatBox = document.getElementById("chatBox");
    const isClickInsideChatBox = chatBox.contains(e.target);
    const isClickOnSubjectCard = e.target.closest(".subject-card");
    const isClickOnCTAButton = e.target.closest(".cta-button"); // Th√™m ki·ªÉm tra n√∫t CTA

    if (
        chatBox.style.display === "flex" &&
        !isClickInsideChatBox &&
        !isClickOnSubjectCard &&
        !isClickOnCTAButton
    ) {
        closeChatBox();
    }
});


// G·ª≠i tin nh·∫Øn khi nh·∫•n Enter
document.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && document.activeElement.id === "chatInput") {
        sendMessage();
    }
});

// Th√™m n√∫t Reset
setTimeout(() => {
    const inputBox = document.querySelector(".chat-input");
    if (inputBox && !document.getElementById("resetBtn")) {
        const resetBtn = document.createElement("button");
        resetBtn.id = "resetBtn";
        resetBtn.textContent = "Reset";
        resetBtn.onclick = resetChat;
        inputBox.appendChild(resetBtn);
    }
}, 1000); // ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ ƒë√£ load tr∆∞·ªõc khi th√™m n√∫t

// D·ªØ li·ªáu g·ª£i √Ω v√† c√¢u tr·∫£ l·ªùi
const suggestionList = {
    "To√°n h·ªçc": [
        "üß© Quiz To√°n h·ªçc",
        "Gi·∫£i ph∆∞∆°ng tr√¨nh x + 5 = 10",
        "T·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn 100",
        "Di·ªán t√≠ch h√¨nh tr√≤n",
        "C√¥ng th·ª©c chu vi h√¨nh ch·ªØ nh·∫≠t",
        "Ph√©p chia c√≥ d∆∞ l√† g√¨?",
        "S·ªë nguy√™n t·ªë l√† g√¨?",
        "T√≠nh 7 x 8",
        "Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh",
        "H√†m s·ªë l√† g√¨?",
        "ƒê·∫°o h√†m l√† g√¨?",
        "T√≠ch ph√¢n c∆° b·∫£n",
        "Gi·∫£i b·∫•t ph∆∞∆°ng tr√¨nh",
        "T√≠nh g√≥c tam gi√°c ƒë·ªÅu",
        "S·ªë pi l√† bao nhi√™u?",
        "ƒê·ªãnh l√Ω Pitago",
        "X√°c su·∫•t trong tung ƒë·ªìng xu",
        "Th·ªëng k√™ m√¥ t·∫£",
        "Ma tr·∫≠n l√† g√¨?",
        "Gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c 2",
        "S·ªë h·ªçc v√† ƒë·∫°i s·ªë kh√°c nhau th·∫ø n√†o?"
    ],
    "VƒÉn h·ªçc": [
        "üß© Quiz VƒÉn h·ªçc",
        "Ph√¢n t√≠ch Truy·ªán Ki·ªÅu",
        "T√≥m t·∫Øt Ch√≠ Ph√®o",
        "C·∫£m nh·∫≠n b√†i Vi·ªát B·∫Øc",
        "Phong c√°ch ngh·ªá thu·∫≠t Nguy·ªÖn Du",
        "So s√°nh th∆° x∆∞a v√† nay",
        "Ngh·ªã lu·∫≠n x√£ h·ªôi l√† g√¨?",
        "VƒÉn bi·ªÉu c·∫£m l√† g√¨?",
        "Ng·ªØ ph√°p ti·∫øng Vi·ªát c√≥ g√¨ ƒë·∫∑c bi·ªát?",
        "C·∫£m x√∫c trong th∆° H√†n M·∫∑c T·ª≠",
        "√ù nghƒ©a b√†i th∆° T·ªè l√≤ng",
        "T√≥m t·∫Øt truy·ªán L√£o H·∫°c",
        "Gi√° tr·ªã nh√¢n ƒë·∫°o c·ªßa V·ª£ Nh·∫∑t",
        "Phong c√°ch th∆° Xu√¢n Di·ªáu",
        "Ng√¥n ng·ªØ trong k·ªãch n√≥i",
        "So s√°nh Truy·ªán Ki·ªÅu v√† L·ª•c V√¢n Ti√™n",
        "H·ªìi k√Ω vƒÉn h·ªçc l√† g√¨?",
        "Ch·ª©c nƒÉng c·ªßa ·∫©n d·ª•",
        "N√™u c·∫£m nh·∫≠n v·ªÅ ƒëo·∫°n th∆° em th√≠ch",
        "V√¨ sao c·∫ßn h·ªçc vƒÉn?",
        "VƒÉn ngh·ªã lu·∫≠n v√† bi·ªÉu c·∫£m kh√°c nhau th·∫ø n√†o?"
    ],
    "L·ªãch s·ª≠": [
        "üß© Quiz L·ªãch s·ª≠",
        "T√≥m t·∫Øt s·ª± ki·ªán 2/9/1945",
        "Nguy√™n nh√¢n chi·∫øn tranh th·∫ø gi·ªõi 1",
        "C√°c tri·ªÅu ƒë·∫°i phong ki·∫øn VN",
        "Phong tr√†o C·∫ßn V∆∞∆°ng",
        "√ù nghƒ©a C√°ch m·∫°ng th√°ng T√°m",
        "Kh√°ng chi·∫øn ch·ªëng Ph√°p",
        "Th·ªùi k·ª≥ B·∫Øc thu·ªôc",
        "Nh·ªØng th√†nh t·ª±u th·ªùi L√Ω",
        "Tr·∫≠n B·∫°ch ƒê·∫±ng",
        "L·ªãch s·ª≠ ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam",
        "Vai tr√≤ H·ªì Ch√≠ Minh",
        "S·ª± ki·ªán 30/4/1975",
        "Chi·∫øn tranh l·∫°nh l√† g√¨?",
        "S·ª± h√¨nh th√†nh ASEAN",
        "C·∫£i c√°ch ru·ªông ƒë·∫•t",
        "Hi·ªáp ƒë·ªãnh Gen√®ve 1954",
        "Ch·ªß nghƒ©a t∆∞ b·∫£n l√† g√¨?",
        "X√£ h·ªôi nguy√™n th·ªßy",
        "C√°ch m·∫°ng c√¥ng nghi·ªáp l·∫ßn 1",
        "Th·∫ø gi·ªõi sau WW2"
    ],
    "Khoa h·ªçc": [
        "üß© Quiz Khoa h·ªçc",
        "T·∫°i sao tr·ªùi m∆∞a?",
        "N∆∞·ªõc s√¥i ·ªü bao nhi√™u ƒë·ªô?",
        "Chu tr√¨nh carbon",
        "L·ª±c h·∫•p d·∫´n l√† g√¨?",
        "T·∫ø b√†o ƒë·ªông v·∫≠t v√† th·ª±c v·∫≠t kh√°c nhau?",
        "Quang h·ª£p l√† g√¨?",
        "ƒê·ªông ƒë·∫•t x·∫£y ra do ƒë√¢u?",
        "C·∫•u tr√∫c nguy√™n t·ª≠",
        "Hi·ªán t∆∞·ª£ng kh√∫c x·∫° √°nh s√°ng",
        "C·∫£m bi·∫øn nhi·ªát ƒë·ªô",
        "Pin ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
        "Ph·∫£n ·ª©ng ho√° h·ªçc l√† g√¨?",
        "H·ªá M·∫∑t Tr·ªùi c√≥ bao nhi√™u h√†nh tinh?",
        "Tr√°i ƒê·∫•t quay quanh M·∫∑t Tr·ªùi bao l√¢u?",
        "DNA l√† g√¨?",
        "Nhi·ªát ƒë·ªô √¢m l√† g√¨?",
        "√Åp su·∫•t kh√≠ quy·ªÉn",
        "Th·ª±c ph·∫©m bi·∫øn ƒë·ªïi gen",
        "C√¥ng ngh·ªá AI ho·∫°t ƒë·ªông th·∫ø n√†o?",
        "T·∫°i sao √°nh s√°ng tr·∫Øng ph√¢n t√°ch?"
    ],
    "Ngo·∫°i ng·ªØ": [
        "üß© Quiz Ngo·∫°i ng·ªØ",
        "D·ªãch c√¢u: I love learning",
        "C√°ch d√πng th√¨ hi·ªán t·∫°i ƒë∆°n",
        "T·ª´ v·ª±ng ch·ªß ƒë·ªÅ tr∆∞·ªùng h·ªçc",
        "Ph√¢n bi·ªát much v√† many",
        "T√≠nh t·ª´ trong ti·∫øng Anh",
        "C√¢u b·ªã ƒë·ªông",
        "M·ªánh ƒë·ªÅ quan h·ªá",
        "C√¢u ƒëi·ªÅu ki·ªán lo·∫°i 1",
        "So s√°nh h∆°n v√† nh·∫•t",
        "Tr·∫≠t t·ª± t√≠nh t·ª´",
        "T·ª´ n·ªëi (linking words)",
        "Th√¨ qu√° kh·ª© ti·∫øp di·ªÖn",
        "Gi·ªõi t·ª´ ch·ªâ th·ªùi gian",
        "C√°ch ph√°t √¢m ƒëu√¥i -s, -ed",
        "T·ª´ v·ª±ng ch·ªß ƒë·ªÅ gia ƒë√¨nh",
        "C√°ch vi·∫øt email b·∫±ng ti·∫øng Anh",
        "T·ª´ v·ª±ng ti·∫øng Anh l·ªõp 6",
        "S·ª± kh√°c nhau gi·ªØa say v√† tell",
        "C·∫•u tr√∫c prefer to V",
        "Idioms th√¥ng d·ª•ng"
    ]
};

const replyDatabase = {
    "To√°n h·ªçc": {
        "ph∆∞∆°ng tr√¨nh": "‚úèÔ∏è V√≠ d·ª•: x + 5 = 10 ‚áí x = 5.",
        "t·ªïng": "üî¢ T·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn n: n(n+1)/2.",
        "di·ªán t√≠ch": "üìê Di·ªán t√≠ch h√¨nh tr√≤n: S = œÄ √ó r¬≤.",
        "chu vi": "üìè Chu vi h√¨nh ch·ªØ nh·∫≠t = 2 √ó (d√†i + r·ªông).",
        "chia c√≥ d∆∞": "‚ûó L√† ph√©p chia m√† ph·∫ßn d∆∞ kh√°c 0.",
        "nguy√™n t·ªë": "üî¢ L√† s·ªë ch·ªâ chia h·∫øt cho 1 v√† ch√≠nh n√≥.",
        "ma tr·∫≠n": "üìò Ma tr·∫≠n l√† b·∫£ng s·ªë d√πng trong ƒë·∫°i s·ªë tuy·∫øn t√≠nh.",
        "x√°c su·∫•t": "üé≤ X√°c su·∫•t tung ƒë·ªìng xu ra m·∫∑t ng·ª≠a l√† 0.5.",
        "pi": "œÄ ‚âà 3.14159",
        "pitago": "üåü a¬≤ + b¬≤ = c¬≤ trong tam gi√°c vu√¥ng.",
        "ƒë·∫°o h√†m": "üìâ Bi·ªÉu th·ªã t·ªëc ƒë·ªô thay ƒë·ªïi c·ªßa h√†m s·ªë.",
        "t√≠ch ph√¢n": "üìä Di·ªán t√≠ch d∆∞·ªõi ƒë∆∞·ªùng cong.",
        "g√≥c tam gi√°c ƒë·ªÅu": "üî∫ M·ªói g√≥c = 60¬∞.",
        "b·∫•t ph∆∞∆°ng tr√¨nh": "üö¶ L√† bi·ªÉu th·ª©c c√≥ d·∫•u <, >, ‚â§, ‚â•.",
        "h·ªá ph∆∞∆°ng tr√¨nh": "üîß T·∫≠p h·ª£p nhi·ªÅu ph∆∞∆°ng tr√¨nh gi·∫£i c√πng l√∫c.",
        "ƒë·∫°i s·ªë": "üìê ƒê·∫°i s·ªë nghi√™n c·ª©u bi·ªÉu th·ª©c v√† ph∆∞∆°ng tr√¨nh.",
        "s·ªë h·ªçc": "‚ûï Li√™n quan ƒë·∫øn t√≠nh to√°n c∆° b·∫£n v·ªõi s·ªë.",
        "h√†m s·ªë": "f(x) l√† h√†m s·ªë n·∫øu m·ªói x ch·ªâ c√≥ m·ªôt y.",
        "gi·∫£i b·∫≠c 2": "ax¬≤ + bx + c = 0 ‚áí Œî = b¬≤ - 4ac.",
        "th·ªëng k√™": "üìà Ph√¢n t√≠ch d·ªØ li·ªáu thu th·∫≠p ƒë∆∞·ª£c."
    },
    "VƒÉn h·ªçc": {
        "truy·ªán ki·ªÅu": "üìö Ki·ªát t√°c c·ªßa Nguy·ªÖn Du n√≥i v·ªÅ bi k·ªãch v√† t√†i nƒÉng.",
        "ch√≠ ph√®o": "üìù Bi k·ªãch ng∆∞·ªùi n√¥ng d√¢n d∆∞·ªõi ch·∫ø ƒë·ªô th·ª±c d√¢n phong ki·∫øn.",
        "vi·ªát b·∫Øc": "üé§ T√¨nh c·∫£m g·∫Øn b√≥ gi·ªØa ƒë·ªìng b√†o v√† c√°n b·ªô kh√°ng chi·∫øn.",
        "phong c√°ch": "üí° Phong c√°ch l√† c√°ch th·ªÉ hi·ªán ri√™ng bi·ªát c·ªßa nh√† vƒÉn.",
        "th∆°": "üñãÔ∏è D·∫°ng vƒÉn h·ªçc c√≥ v·∫ßn ƒëi·ªáu, c·∫£m x√∫c.",
        "ngh·ªã lu·∫≠n": "üí¨ Tr√¨nh b√†y suy nghƒ© v·ªÅ v·∫•n ƒë·ªÅ x√£ h·ªôi.",
        "bi·ªÉu c·∫£m": "‚ù§Ô∏è Tr√¨nh b√†y c·∫£m x√∫c, suy nghƒ© ch·ªß quan.",
        "·∫©n d·ª•": "üåø D√πng h√¨nh ·∫£nh kh√°c ƒë·ªÉ n√≥i ƒë·∫øn ƒëi·ªÅu mu·ªën n√≥i.",
        "xu√¢n di·ªáu": "üíò Nh√† th∆° c·ªßa t√¨nh y√™u v√† th·ªùi gian.",
        "t·ªè l√≤ng": "‚öîÔ∏è B√†i th∆° y√™u n∆∞·ªõc c·ªßa Ph·∫°m Ng≈© L√£o.",
        "v·ª£ nh·∫∑t": "ü•£ Ph·∫£n √°nh n·∫°n ƒë√≥i 1945 v√† nh√¢n ph·∫©m con ng∆∞·ªùi.",
        "l√£o h·∫°c": "üë¥ L√£o H·∫°c b√°n ch√≥ v√¨ th∆∞∆°ng con, s·ªëng nh√¢n h·∫≠u.",
        "so s√°nh": "üîç Ph√©p tu t·ª´ ch·ªâ s·ª± gi·ªëng nhau gi·ªØa hai ƒë·ªëi t∆∞·ª£ng.",
        "h·ªìi k√Ω": "üìñ Ghi l·∫°i tr·∫£i nghi·ªám th·∫≠t c·ªßa ng∆∞·ªùi vi·∫øt.",
        "t√¨nh c·∫£m": "üíì Ch·ªß ƒë·ªÅ th∆∞·ªùng g·∫∑p trong vƒÉn th∆°.",
        "ng√¥n ng·ªØ": "üó£Ô∏è C√¥ng c·ª• ch√≠nh c·ªßa vƒÉn h·ªçc.",
        "vƒÉn ngh·ªã lu·∫≠n": "‚öñÔ∏è Tr√¨nh b√†y l√Ω l·∫Ω, d·∫´n ch·ª©ng, ph·∫£n bi·ªán.",
        "ng·ªØ ph√°p": "üî† C·∫•u tr√∫c c√¢u trong ti·∫øng Vi·ªát.",
        "c·∫£m x√∫c": "üé≠ L√† y·∫øu t·ªë t·∫°o n√™n h·ªìn vƒÉn h·ªçc.",
        "t·ª´ ng·ªØ": "üìù V·ªën t·ª´ phong ph√∫ gi√∫p di·ªÖn ƒë·∫°t hay h∆°n."
    },
    "L·ªãch s·ª≠": {
        "2/9": "üáªüá≥ Ng√†y Ch·ªß t·ªãch H·ªì Ch√≠ Minh ƒë·ªçc Tuy√™n ng√¥n ƒê·ªôc l·∫≠p.",
        "chi·∫øn tranh th·∫ø gi·ªõi": "üåç X·∫£y ra do tranh ch·∫•p quy·ªÅn l·ª±c gi·ªØa c√°c n∆∞·ªõc l·ªõn.",
        "tri·ªÅu ƒë·∫°i": "üëë C√°c tri·ªÅu ƒë·∫°i Vi·ªát: L√Ω, Tr·∫ßn, L√™, Nguy·ªÖn...",
        "c·∫ßn v∆∞∆°ng": "üéØ Phong tr√†o ch·ªëng Ph√°p k√™u g·ªçi trung th√†nh v·ªõi vua.",
        "30/4": "‚úä Gi·∫£i ph√≥ng mi·ªÅn Nam, th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc 1975.",
        "th√°ng t√°m": "üìÖ C√°ch m·∫°ng 1945 l·∫≠t ƒë·ªï ch√≠nh ph·ªß b√π nh√¨n.",
        "ph√°p thu·ªôc": "üó∫Ô∏è Vi·ªát Nam b·ªã ƒë√¥ h·ªô g·∫ßn 100 nƒÉm.",
        "b·∫Øc thu·ªôc": "üß≠ Th·ªùi k·ª≥ b·ªã ph∆∞∆°ng B·∫Øc x√¢m l∆∞·ª£c v√† ƒë√¥ h·ªô.",
        "tr·∫≠n b·∫°ch ƒë·∫±ng": "‚öì Chi·∫øn th·∫Øng l·ªõn c·ªßa Ng√¥ Quy·ªÅn, L√™ Ho√†n v√† Tr·∫ßn H∆∞ng ƒê·∫°o.",
        "hi·ªáp ƒë·ªãnh gen√®ve": "‚úçÔ∏è Chia Vi·ªát Nam th√†nh 2 mi·ªÅn t·∫°m th·ªùi nƒÉm 1954.",
        "ch·ªß nghƒ©a t∆∞ b·∫£n": "üíº H·ªá th·ªëng kinh t·∫ø d·ª±a v√†o s·ªü h·ªØu t∆∞ nh√¢n.",
        "li√™n x√¥": "üåè C∆∞·ªùng qu·ªëc XHCN l·ªõn nh·∫•t th·∫ø k·ª∑ 20.",
        "h·ªì ch√≠ minh": "üë®‚Äçüè´ Ng∆∞·ªùi s√°ng l·∫≠p n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a.",
        "ƒë·∫£ng c·ªông s·∫£n": "‚öíÔ∏è T·ªï ch·ª©c l√£nh ƒë·∫°o c√°ch m·∫°ng VN.",
        "ASEAN": "üåê Hi·ªáp h·ªôi c√°c qu·ªëc gia ƒê√¥ng Nam √Å.",
        "x√£ h·ªôi nguy√™n th·ªßy": "ü™ì Giai ƒëo·∫°n ƒë·∫ßu c·ªßa l·ªãch s·ª≠ lo√†i ng∆∞·ªùi.",
        "c√¥ng nghi·ªáp": "üè≠ C√°ch m·∫°ng t·∫°o b∆∞·ªõc nh·∫£y v·ªçt c√¥ng ngh·ªá.",
        "ƒë·ªïi m·ªõi": "üîÑ Ch√≠nh s√°ch ph√°t tri·ªÉn ƒë·∫•t n∆∞·ªõc sau 1986.",
        "l·ªãch s·ª≠ th·∫ø gi·ªõi": "üåé Bao g·ªìm c√°c n·ªÅn vƒÉn minh l·ªõn: Ai C·∫≠p, La M√£, Trung Hoa.",
        "th·∫ø gi·ªõi sau chi·∫øn tranh": "üåê H√¨nh th√†nh 2 c·ª±c: Li√™n X√¥ v√† M·ªπ."
    },
    "Khoa h·ªçc": {
        "tr·ªùi m∆∞a": "üåßÔ∏è Do h∆°i n∆∞·ªõc ng∆∞ng t·ª• t·∫°o th√†nh m√¢y r·ªìi m∆∞a.",
        "n∆∞·ªõc s√¥i": "üíß 100¬∞C ·ªü √°p su·∫•t th∆∞·ªùng.",
        "carbon": "üî¨ Cacbon di chuy·ªÉn qua sinh v·∫≠t v√† kh√≠ quy·ªÉn.",
        "quang h·ª£p": "üå± Qu√° tr√¨nh t·∫°o ra O2 v√† ƒë∆∞·ªùng t·ª´ CO‚ÇÇ v√† √°nh s√°ng.",
        "t·∫ø b√†o": "üî¨ ƒê∆°n v·ªã c∆° b·∫£n c·ªßa s·ª± s·ªëng.",
        "l·ª±c h·∫•p d·∫´n": "üåç L·ª±c h√∫t gi·ªØa m·ªçi v·∫≠t c√≥ kh·ªëi l∆∞·ª£ng.",
        "ƒë·ªông ƒë·∫•t": "üåè Do s·ª± d·ªãch chuy·ªÉn c·ªßa c√°c m·∫£ng ki·∫øn t·∫°o.",
        "kh√∫c x·∫°": "üåà √Ånh s√°ng ƒë·ªïi h∆∞·ªõng khi ƒëi qua ch·∫•t kh√°c nhau.",
        "pin": "üîã Thi·∫øt b·ªã chuy·ªÉn h√≥a nƒÉng l∆∞·ª£ng h√≥a h·ªçc th√†nh ƒëi·ªán.",
        "ph·∫£n ·ª©ng ho√° h·ªçc": "üß™ S·ª± bi·∫øn ƒë·ªïi ch·∫•t n√†y th√†nh ch·∫•t kh√°c.",
        "nguy√™n t·ª≠": "üß¨ C·∫•u t·∫°o b·ªüi proton, neutron, electron.",
        "nhi·ªát ƒë·ªô √¢m": "‚ùÑÔ∏è D∆∞·ªõi 0¬∞C, d√πng trong nghi√™n c·ª©u v√† b·∫£o qu·∫£n.",
        "h√†nh tinh": "ü™ê Sao quay quanh M·∫∑t Tr·ªùi (v√≠ d·ª•: Tr√°i ƒê·∫•t, Sao H·ªèa).",
        "DNA": "üß¨ V·∫≠t li·ªáu di truy·ªÅn trong sinh v·∫≠t s·ªëng.",
        "√°p su·∫•t": "üå™Ô∏è L·ª±c t√°c ƒë·ªông tr√™n m·ªôt ƒë∆°n v·ªã di·ªán t√≠ch.",
        "√°nh s√°ng tr·∫Øng": "üåû T·∫≠p h·ª£p c·ªßa nhi·ªÅu m√†u (c·∫ßu v·ªìng).",
        "AI": "ü§ñ Tr√≠ tu·ªá nh√¢n t·∫°o m√¥ ph·ªèng t∆∞ duy con ng∆∞·ªùi.",
        "gen bi·∫øn ƒë·ªïi": "üåΩ Sinh v·∫≠t c√≥ ADN b·ªã thay ƒë·ªïi.",
        "sensor nhi·ªát": "üå°Ô∏è Thi·∫øt b·ªã ƒëo nhi·ªát ƒë·ªô.",
        "v·∫≠t l√Ω": "‚öõÔ∏è Ng√†nh nghi√™n c·ª©u c√°c ƒë·ªãnh lu·∫≠t t·ª± nhi√™n."
    },
    "Ngo·∫°i ng·ªØ": {
        "i love learning": "‚ù§Ô∏è D·ªãch: T√¥i y√™u vi·ªác h·ªçc.",
        "hi·ªán t·∫°i ƒë∆°n": "‚åõ S + V(s/es). V√≠ d·ª•: She works, they play.",
        "t·ª´ v·ª±ng": "üìò School, teacher, student, book...",
        "much": "Much d√πng cho danh t·ª´ kh√¥ng ƒë·∫øm ƒë∆∞·ª£c.",
        "many": "Many d√πng cho danh t·ª´ ƒë·∫øm ƒë∆∞·ª£c.",
        "t√≠nh t·ª´": "Happy, big, red... d√πng ƒë·ªÉ m√¥ t·∫£.",
        "b·ªã ƒë·ªông": "S + to be + V3/ed.",
        "m·ªánh ƒë·ªÅ": "Who, which, that... ƒë·ªÉ n·ªëi th√¥ng tin.",
        "ƒëi·ªÅu ki·ªán": "If + S + V, S + will/can...",
        "so s√°nh": "Taller, more beautiful, the most.",
        "t√≠nh t·ª´ k√©p": "A beautiful big red car.",
        "li√™n t·ª´": "However, therefore, because...",
        "qu√° kh·ª© ti·∫øp di·ªÖn": "S + was/were + V-ing.",
        "gi·ªõi t·ª´": "In, on, at ch·ªâ th·ªùi gian v√† n∆°i ch·ªën.",
        "ƒëu√¥i ed": "Ph√°t √¢m: /id/, /t/, /d/ t√πy ƒë·ªông t·ª´.",
        "gia ƒë√¨nh": "Father, mother, sister...",
        "email": "Dear..., I hope you are well...",
        "say tell": "Say + something, Tell + someone + something.",
        "prefer": "Prefer to V: I prefer to read.",
        "idiom": "Break a leg = Ch√∫c may m·∫Øn!"
    }
};

// Load theme when page loads
document.addEventListener('DOMContentLoaded', function() {
    loadTheme();
>>>>>>> 07a62967af4b234b9504ead2a8a09ba3662d274e
});